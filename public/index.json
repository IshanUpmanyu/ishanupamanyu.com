[{"content":"\u003cp\u003eIn this blog post, we will create in Lucene \u003ccode\u003eDid you mean\u003c/code\u003e feature as seen in Google. Let’s begin by understanding what this feature is.\u003c/p\u003e\n\u003cp\u003eWhenever you misspell a word in google, google is able to figure out that you made a mistake. If the mistake is not significant, then google simply shows results for what it thinks is the correct spelling. It also gives you the option to search instead for the original query you entered.\u003c/p\u003e\n\u003cp\u003e\n\n     \u003cimg src=\"/uploads/2022/04/Screenshot-2022-04-03-at-8.53.29-PM_hu5aecac8587f997f814f686b552555180_157704_1720x932_resize_q75_h2_box_3.webp\"\u003e\n    \n  \nBut if it feels there is a significant difference in the spelling of the query and what it thinks the right query is, it will ask you what you meant by using the “Did you mean” feature as shown below:\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/04/Screenshot-2022-04-03-at-8.53.01-PM-1_hu1f10b1761995bcf2f0289e8cef94a283_88727_1718x756_resize_q75_h2_box_3.webp\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: \u003c/figcaption\u003e\n  \u003c/figure\u003e\u003ch2 id=\"lucene-did-you-mean-feature-java-example\"\u003eLucene did you mean feature java example\u003c/h2\u003e\n\u003cp\u003eIf you are creating a search engine using Apache Lucene, you can create a similar feature.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWe can create in Lucene DID YOU MEAN feature by using the Hunspell dictionaries. These come prebuilt in Lucene in the analyzer common library.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTo create a \u003ccode\u003eDid you mean\u003c/code\u003e feature in Lucene we need to have the following capabilities:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWe need to know when a word is not spelled correctly. This will help us show the \u003cem\u003edid you mean\u003c/em\u003e prompt to the user only when we need to.\u003c/li\u003e\n\u003cli\u003eOnce we know the word is misspelled, then we need the ability to show the correct spelling.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWe can achieve both these things using Lucene’s \u003ca href=\"https://lucene.apache.org/core/8_9_0/analyzers-common/org/apache/lucene/analysis/hunspell/Hunspell.html\"\u003eHunspell\u003c/a\u003e class. Here is a working example of how to use the Hunspell class.\u003c/p\u003e\n\u003ch3 id=\"dependencies\"\u003eDependencies\u003c/h3\u003e\n\u003cp\u003eWe need Lucene’s core and analyzers-common library.\u003c/p\u003e\n\u003cp\u003eIn case you are using MAVEN, copy the following dependencies in pom.xml\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.lucene\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003elucene-core\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e8.10.1\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.lucene\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003elucene-analyzers-common\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e8.10.1\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"hunspell-dictionary-files\"\u003eHunspell Dictionary files\u003c/h3\u003e\n\u003cp\u003eFor this feature to work you need the following two libraries:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAffix file: This can be found \u003ca href=\"https://github.com/ropensci/hunspell/blob/master/inst/dict/en_US.aff\"\u003ehere\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe dictionary file: Can be found \u003ca href=\"https://github.com/ropensci/hunspell/blob/master/inst/dict/en_US.dic\"\u003ehere\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou can get affix and dictionary files for other languages \u003ca href=\"https://cgit.freedesktop.org/libreoffice/dictionaries/tree/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"java-code\"\u003eJAVA code\u003c/h3\u003e\n\u003cp\u003eHere is the java code. It does two things:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCheck the spelling of words and\u003c/li\u003e\n\u003cli\u003eGet some suggestions for words.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e upmanyu.ishan.lucene.tutorial;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.analysis.hunspell.Dictionary;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.analysis.hunspell.Hunspell;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.store.Directory;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.store.FSDirectory;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.*;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.net.URL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.nio.file.Files;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.text.ParseException;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDidYouMean\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException, ParseException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e        Directory directory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Files.\u003cspan style=\"color:#a6e22e\"\u003ecreateTempDirectory\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;temp\u0026#34;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e        InputStream affFileStream \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FileInputStream(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;src/main/resources/hunspell/en-US/en_US.aff\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e        InputStream dicFileStream \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FileInputStream(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;src/main/resources/hunspell/en-US/en_US.dic\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e        Dictionary dictionary \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Dictionary(directory, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;spellCheck\u0026#34;\u003c/span\u003e, affFileStream, dicFileStream);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e        Hunspell spellChecker \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Hunspell(dictionary);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e        String correctWord \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;guava\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e        String misspelledWord \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;recieve\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(String.\u003cspan style=\"color:#a6e22e\"\u003eformat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Is %s spelled correctly?: %b\u0026#34;\u003c/span\u003e, correctWord, spellChecker.\u003cspan style=\"color:#a6e22e\"\u003espell\u003c/span\u003e(correctWord)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(String.\u003cspan style=\"color:#a6e22e\"\u003eformat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Is %s spelled correctly?: %b\u0026#34;\u003c/span\u003e, misspelledWord, spellChecker.\u003cspan style=\"color:#a6e22e\"\u003espell\u003c/span\u003e(misspelledWord)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(String.\u003cspan style=\"color:#a6e22e\"\u003eformat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Did you mean: %s\u0026#34;\u003c/span\u003e, spellChecker.\u003cspan style=\"color:#a6e22e\"\u003esuggest\u003c/span\u003e(misspelledWord)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eOUTPUT\u003c/strong\u003e:\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/04/Screenshot-2022-04-03-at-9.19.06-PM_hu253967fdafd913489d2448598f072022_37187_1394x516_resize_q75_h2_box_3.webp\" alt=\"lucene did you mean example output\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: \u003c/figcaption\u003e\n  \u003c/figure\u003e\u003cp\u003eNow that you have seen the java code in action, let us try and understand how this code works. The core part of this code is the Hunspell class in Lucene. According to Wikipedia:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHunspell is a spell checker and morphological analyser designed for languages with rich morphology and complex word compounding and character encoding, originally designed for the Hungarian language.\u003c/p\u003e\n\u003cp\u003e\u003ccite\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Hunspell\"\u003ehttps://en.wikipedia.org/wiki/Hunspell\u003c/a\u003e\u003c/cite\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHunspell is used by LibreOffice office suite, free browsers, like Mozilla Firefox and Google Chrome, and other tools and OSes, like Linux distributions and macOS. It is also a command-line tool for Linux, Unix-like, and other OSes.\u003c/p\u003e\n\u003ch2 id=\"how-do-hunspell-dictionaries-work\"\u003eHow do Hunspell dictionaries work?\u003c/h2\u003e\n\u003cp\u003eA Hunspell dictionary needs two files to work:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAffix File: An affix file (*.aff) contains a list of suffixes and prefixes and rules describing them. The rules describe where we can use a suffix or prefix. For example, you may have a rule which says the suffix \u003cem\u003e\u003ccode\u003eied\u003c/code\u003e\u003c/em\u003e can be applied only if the last character of the word is y, in other cases suffix \u003cem\u003e\u003ccode\u003eed\u003c/code\u003e\u003c/em\u003e should be used.\u003c/li\u003e\n\u003cli\u003eDictionary file: A dictionary file (*.dic) contains a list of words one per line. The first line of the dictionaries (except personal dictionaries) contains the approximate word count (for optimal hash memory size). Each word may optionally be followed by a slash (“/”) and one or more flags, which represents the word attributes, for example, affixes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eUsing these two files, the algorithm tries to find if the word can be formed with the given affix and dictionary file rules.\u003c/p\u003e\n\u003cp\u003eAs stated in Linux man-pages:\u003c/p\u003e\n\u003cp\u003eConsider the Dictionary file:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e3\nhello\ntry/B\nwork/AB\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\n\u003cp\u003eThe flags B and A specify the attributes of these words.\u003c/p\u003e\n\u003cp\u003e\u003ccite\u003e\u003ca href=\"http://manpages.ubuntu.com/manpages/bionic/man5/hunspell.5.html\"\u003ehttp://manpages.ubuntu.com/manpages/bionic/man5/hunspell.5.html\u003c/a\u003e\u003c/cite\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eand the Affix file:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSET UTF-8\nTRY esianrtolcdugmphbyfvkwzESIANRTOLCDUGMPHBYFVKWZ\u0026#39;\n\nREP 2\nREP f ph\nREP ph f\n\nPFX A Y 1\nPFX A 0 re .\n\nSFX B Y 2\nSFX B 0 ed [^y]\nSFX B y ied y\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the affix file, prefix A and suffix B have been defined. Flag A defines a \u003ccode\u003ere-‘ prefix. Class B defines two \u003c/code\u003e-ed’ suffixes. First B suffix can be added to a word if the last character of the word isn’t \u003ccode\u003ey’. The second suffix can be added to the words terminated with an \u003c/code\u003ey’.\u003c/p\u003e\n\u003cp\u003eAll accepted words with this dictionary and affix combination are: “hello”, “try”, “tried”, “work”, “worked”, “rework”, “reworked”.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://manpages.ubuntu.com/manpages/bionic/man5/hunspell.5.html\"\u003ehttp://manpages.ubuntu.com/manpages/bionic/man5/hunspell.5.html\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this blog post, we understood what \u003ccode\u003edid you mean\u003c/code\u003e feature in google is. Then we saw some code to create in Lucene \u003ccode\u003eDid you mean\u003c/code\u003e feature by using Hunspell dictionary. We ended this post by learning how Hunspell dictionaries work.\u003c/p\u003e\n\u003ch2 id=\"what-next\"\u003eWhat Next?\u003c/h2\u003e\n\u003cp\u003eIf you enjoyed this article I am guessing you might be using Lucene to create a search application. I also created a search engine to search on English Wikipedia Articles. Do you want to know how I did it? Read all about it \u003ca href=\"/blog/search-engine-for-wikipedia-articles/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLinux MAN pages for Hunspell: \u003ca href=\"http://manpages.ubuntu.com/manpages/bionic/man5/hunspell.5.html\"\u003ehttp://manpages.ubuntu.com/manpages/bionic/man5/hunspell.5.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHunspell Project on Github: \u003ca href=\"https://github.com/hunspell/hunspell\"\u003ehttps://github.com/hunspell/hunspell\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHunspell Wikipedia page: \u003ca href=\"https://en.wikipedia.org/wiki/Hunspell\"\u003ehttps://en.wikipedia.org/wiki/Hunspell\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","description":"","image":"/uploads/2022/04/Screenshot-2022-04-03-at-8.46.39-PM.png","permalink":"http://localhost:1313/blog/lucene-did-you-mean/","title":"How to create in Lucene DID YOU MEAN feature like google?"},{"content":"\u003cp\u003eIf you are new to Lucene you may be wondering how to get all documents in the Lucene index. We can easily get documents matching a particular term or matching a query but how do we get all the documents in the Lucene index?\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWe can get all documents in Lucene by using either the \u003ca href=\"https://lucene.apache.org/core/9_1_0/core/org/apache/lucene/search/MatchAllDocsQuery.html\"\u003eMatchAllDocsQuery\u003c/a\u003e query or by using *:* as the search string with QueryParser.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn this blog post, we will look at both ways with fully working code to get all documents from the Lucene index.\u003c/p\u003e\n\u003ch2 id=\"get-all-documents-in-lucene-using-matchalldocsquery\"\u003eGet all documents in Lucene using MatchAllDocsQuery\u003c/h2\u003e\n\u003cp\u003eLucene provides a special query called \u003ca href=\"https://lucene.apache.org/core/9_1_0/core/org/apache/lucene/search/MatchAllDocsQuery.html\"\u003eMatchAllDocsQuery\u003c/a\u003e. As the name suggests this query will match all the documents that are contained in the index. You can create this query as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//This query will match with all documents in the index\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eQuery query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e MatchAllDocsQuery();\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"get-all-documents-in-lucene-using-queryparser\"\u003eGet all documents in Lucene using QueryParser\u003c/h2\u003e\n\u003cp\u003eThe other way is to create the query using Lucene QueryParser with the following *:* as the search string. This tells Lucene to match all terms in all fields thereby matching all documents. Here is the code to get all documents using this method:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eQueryParser queryParser \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e QueryParser(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//We pass in our special syntax to fetch all documents. This searches for all terms in all fields.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003eQuery query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e queryParser.\u003cspan style=\"color:#a6e22e\"\u003eparse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*:*\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"working-example-to-get-all-documents-in-lucene\"\u003eWorking example to get all documents in Lucene\u003c/h2\u003e\n\u003cp\u003eAs promised, here is the fully functional code to get all documents present in the Lucene index.\u003c/p\u003e\n\u003cp\u003eIn this example, we first index 100 documents into our index. Then we present the two ways to fetch all the documents.\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e upmanyu.ishan.lucene.tutorial;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.analysis.Analyzer;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.analysis.standard.StandardAnalyzer;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.document.Document;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  6\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.document.Field;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  7\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.document.TextField;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  8\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.index.DirectoryReader;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e  9\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.index.IndexReader;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 10\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.index.IndexWriter;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 11\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.index.IndexWriterConfig;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 12\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.queryparser.classic.ParseException;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 13\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.queryparser.classic.QueryParser;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 14\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.search.*;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 15\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.store.Directory;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 16\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.store.FSDirectory;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 17\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 18\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 19\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.nio.file.Paths;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 20\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 21\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 22\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * This class illustrates how to get all documents in Lucene index.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 23\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 24\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGetAllDocs\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 25\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 26\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 27\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * Get all documents in Lucene index using query parser syntax of *:*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 28\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 29\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @param indexPath the index path where index is stored\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 30\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @throws IOException    the io exception\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 31\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @throws ParseException the parse exception\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 32\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 33\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetAllDocsWithQueryParser\u003c/span\u003e(String indexPath) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException, ParseException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 34\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 35\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We need to open an IndexReader to read the lucene index stored at given indexPath\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 36\u003c/span\u003e\u003cspan\u003e        IndexReader indexReader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e DirectoryReader.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Paths.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(indexPath)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 37\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 38\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//IndexSearcher will help us query the index\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 39\u003c/span\u003e\u003cspan\u003e        IndexSearcher indexSearcher \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexSearcher(indexReader);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 40\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 41\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We will use standard analyzer while we parse our query.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 42\u003c/span\u003e\u003cspan\u003e        Analyzer analyzer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StandardAnalyzer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 43\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 44\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//This query parser will search in title field by default if no field is specified.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 45\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Also, this will use our Standard analyzer to create terms for the query.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 46\u003c/span\u003e\u003cspan\u003e        QueryParser queryParser \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e QueryParser(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 47\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 48\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We pass in our special syntax to fetch all documents. This searches for all terms in all fields.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 49\u003c/span\u003e\u003cspan\u003e        Query query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e queryParser.\u003cspan style=\"color:#a6e22e\"\u003eparse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*:*\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 50\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 51\u003c/span\u003e\u003cspan\u003e        searchAndPrintResults(indexSearcher, query);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 52\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 53\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 54\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 55\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 56\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * Get all documents in Lucene index using MatchAllDocsQuery.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 57\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 58\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @param indexPath the index path where index is stored\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 59\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @throws IOException    the io exception\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 60\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @throws ParseException the parse exception\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 61\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 62\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetAllDocsWithMatchAllDocsQuery\u003c/span\u003e(String indexPath) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException, ParseException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 63\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 64\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We need to open an IndexReader to read the lucene index stored at given indexPath\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 65\u003c/span\u003e\u003cspan\u003e        IndexReader indexReader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e DirectoryReader.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Paths.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(indexPath)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 66\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 67\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//IndexSearcher will help us query the index\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 68\u003c/span\u003e\u003cspan\u003e        IndexSearcher indexSearcher \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexSearcher(indexReader);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 69\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 70\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//This query will match with all documents in the index\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 71\u003c/span\u003e\u003cspan\u003e        Query query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e MatchAllDocsQuery();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 72\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 73\u003c/span\u003e\u003cspan\u003e        searchAndPrintResults(indexSearcher, query);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 74\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 75\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 76\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 77\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 78\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esearchAndPrintResults\u003c/span\u003e(IndexSearcher indexSearcher, Query query) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 79\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We perform the search and get search results 10 at a time.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 80\u003c/span\u003e\u003cspan\u003e        TopDocs topDocs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e indexSearcher.\u003cspan style=\"color:#a6e22e\"\u003esearch\u003c/span\u003e(query, 10);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 81\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 82\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Print the count of matching documents.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 83\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e totalHits \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e topDocs.\u003cspan style=\"color:#a6e22e\"\u003etotalHits\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 84\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(String.\u003cspan style=\"color:#a6e22e\"\u003eformat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Found %d hits.\u0026#34;\u003c/span\u003e, totalHits));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 85\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 86\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Print the title field of each matching document\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 87\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(topDocs.\u003cspan style=\"color:#a6e22e\"\u003escoreDocs\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e 0){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 88\u003c/span\u003e\u003cspan\u003e            ScoreDoc\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e results  \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e topDocs.\u003cspan style=\"color:#a6e22e\"\u003escoreDocs\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 89\u003c/span\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(ScoreDoc scoreDoc: results){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 90\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 91\u003c/span\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e//Returns the id of the document matching the query\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 92\u003c/span\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e docId \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scoreDoc.\u003cspan style=\"color:#a6e22e\"\u003edoc\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 93\u003c/span\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e score \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scoreDoc.\u003cspan style=\"color:#a6e22e\"\u003escore\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 94\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 95\u003c/span\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e//We fetch the complete document from index via its id\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 96\u003c/span\u003e\u003cspan\u003e                Document movie \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e indexSearcher.\u003cspan style=\"color:#a6e22e\"\u003edoc\u003c/span\u003e(docId);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 97\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 98\u003c/span\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e//Now we print the title of the document\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 99\u003c/span\u003e\u003cspan\u003e                System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(String.\u003cspan style=\"color:#a6e22e\"\u003eformat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Found: %s\u0026#34;\u003c/span\u003e, movie.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e100\u003c/span\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e101\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e102\u003c/span\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e//we fetch the last doc of this page. We will need to pass this to index searcher to get next page.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e103\u003c/span\u003e\u003cspan\u003e            ScoreDoc lastDoc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e results\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eresults.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e104\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e105\u003c/span\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e//Get next 10 documents after lastDoc. This gets us the next page of search results.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e106\u003c/span\u003e\u003cspan\u003e            topDocs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e indexSearcher.\u003cspan style=\"color:#a6e22e\"\u003esearchAfter\u003c/span\u003e(lastDoc, query, 10);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e107\u003c/span\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e108\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e109\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e110\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e111\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * This method adds 100 documents to our index.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e112\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e113\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @param indexPath the index path where we want to store the index\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e114\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @throws IOException the io exception\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e115\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e116\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e(String indexPath) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e117\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e118\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We open a File System directory as we want to store the index on our local file system.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e119\u003c/span\u003e\u003cspan\u003e        Directory directory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Paths.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(indexPath));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e120\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e121\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//The analyzer is used to perform analysis on text of documents and create the terms that will be\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e122\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//added in the index.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e123\u003c/span\u003e\u003cspan\u003e        Analyzer analyzer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StandardAnalyzer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e124\u003c/span\u003e\u003cspan\u003e        IndexWriterConfig indexWriterConfig \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriterConfig(analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e125\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e126\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//This will always overwrite the existing index. This way even if we run the program multiple times\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e127\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//we won\u0026#39;t see duplicate documents.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e128\u003c/span\u003e\u003cspan\u003e        indexWriterConfig.\u003cspan style=\"color:#a6e22e\"\u003esetOpenMode\u003c/span\u003e(IndexWriterConfig.\u003cspan style=\"color:#a6e22e\"\u003eOpenMode\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCREATE\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e129\u003c/span\u003e\u003cspan\u003e        IndexWriter indexWriter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriter(directory, indexWriterConfig);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e130\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e131\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Going to index 100 documents.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e132\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e133\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Now we create 100 documents. We have only one Field called title in each document.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e134\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e 100; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e135\u003c/span\u003e\u003cspan\u003e            Document doc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Document();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e136\u003c/span\u003e\u003cspan\u003e            doc.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is document \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e i, Field.\u003cspan style=\"color:#a6e22e\"\u003eStore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYES\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e137\u003c/span\u003e\u003cspan\u003e            indexWriter.\u003cspan style=\"color:#a6e22e\"\u003eaddDocument\u003c/span\u003e(doc);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e138\u003c/span\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e139\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e140\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Documents Indexed Successfully!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e141\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e142\u003c/span\u003e\u003cspan\u003e        indexWriter.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e143\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e144\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e145\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e146\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * The entry point of application.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e147\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     *\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e148\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @param args the input arguments\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e149\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @throws IOException    the io exception\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e150\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     * @throws ParseException the parse exception\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e151\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e     */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e152\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException, ParseException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e153\u003c/span\u003e\u003cspan\u003e        String indexPath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e154\u003c/span\u003e\u003cspan\u003e        GetAllDocs getAllDocsExample \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e GetAllDocs();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e155\u003c/span\u003e\u003cspan\u003e        getAllDocsExample.\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e(indexPath);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e156\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e157\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Here are all documents fetched with QueryParser Syntax\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e158\u003c/span\u003e\u003cspan\u003e        getAllDocsExample.\u003cspan style=\"color:#a6e22e\"\u003egetAllDocsWithQueryParser\u003c/span\u003e(indexPath);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e159\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e160\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e161\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Here are all documents fetched with MatchAllDocsQuery\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e162\u003c/span\u003e\u003cspan\u003e        getAllDocsExample.\u003cspan style=\"color:#a6e22e\"\u003egetAllDocsWithMatchAllDocsQuery\u003c/span\u003e(indexPath);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e163\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e164\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this post, we saw how to get all documents in Lucene using two methods. We first introduced the methods and then we gave a detailed example of how to use both methods.\u003c/p\u003e\n\u003ch2 id=\"what-next\"\u003eWhat next?\u003c/h2\u003e\n\u003cp\u003eYou now seem to be enjoying working with Lucene, but have you ever wondered how Lucene is able to give search result this fast? It is so because it is powered by an awesome data structure known as the inverted index. Read all about it \u003ca href=\"/blog/inverted-index-data-structure/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n","description":"","image":"/uploads/2022/01/Apache-Lucene-1-e1648997525598.jpeg","permalink":"http://localhost:1313/blog/get-all-documents-in-lucene/","title":"How to get all documents in Lucene?"},{"content":"\u003cp\u003eApache Lucene is a full-text search library written in Java. Lucene is a \u003ca href=\"https://lucene.apache.org/\"\u003etop-level Apache Project.\u003c/a\u003e and was written in 1999 by \u003ca href=\"https://en.wikipedia.org/wiki/Doug_Cutting\"\u003eDoug Cutting\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis is the only Apache Lucene tutorial you will need to get started with Lucene in 2022. We will first go over the basic concepts of Apache Lucene. Then we will try and explore the Lucene API. At last, we will end this tutorial by building a search application that indexes and searches files on our local file system. We will be using Lucene 8 in this tutorial which is the current version of Lucene as of early 2022.\u003c/p\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003ch3 id=\"what-is-lucene\"\u003eWhat is Lucene?\u003c/h3\u003e\n\u003cp\u003eLucene is a full-text search library written in Java. It is a powerful library that forms the core of many Search based technologies like Elasticsearch and Solr. Lucene is very fast. It can help you find a document containing a given word among millions of documents in milliseconds. From searching in milliseconds to indexing speeds of as high as \u003ca href=\"http://people.apache.org/~mikemccand/lucenebench/indexing.html\"\u003e700GB per hour\u003c/a\u003e, Lucene is a library with very high performance.\u003c/p\u003e\n\u003ch3 id=\"history-of-apache-lucene\"\u003eHistory of Apache Lucene\u003c/h3\u003e\n\u003cp\u003eLucene was first published in 1999 by Doug Cutting. Cutting originally published Lucene on SourceForge. In September 2001 it joined the Jakarta family of software of Apache Software Foundation. In January 2005, it became its own top-level project.\u003c/p\u003e\n\u003cp\u003eInitially, various other projects like Mahout, Tika, and Nutch were also a part of Lucene. Later they got separated into their own top-level Apache Products.\u003c/p\u003e\n\u003ch3 id=\"lucene-vs-solr-and-elasticsearch\"\u003eLucene vs Solr and Elasticsearch\u003c/h3\u003e\n\u003cp\u003eWhile Lucene is just a java library, Elasticsearch and Solr are full-fledged search servers. You can imagine the difference between Lucene being the engine and Elasticsearch being a Ferrari and Solr being a Lamborgini.\u003c/p\u003e\n\u003cp\u003eWith Lucene, you get the core capabilities of performing the search but Elasticsearch and Solr add features to it like providing an HTTP interface to Lucene-based search, automatically managing the performance by using distributed computing on top of Lucene, and many other features.\u003c/p\u003e\n\u003cp\u003eNow that you understand what Lucene is we will begin this Lucene tutorial by building a simple java application.\u003c/p\u003e\n\u003ch2 id=\"lucene-tutorial--a-simple-java-application\"\u003eLucene Tutorial – A simple java application\u003c/h2\u003e\n\u003ch3 id=\"adding-dependencies\"\u003eAdding dependencies\u003c/h3\u003e\n\u003cp\u003eWe need \u003ccode\u003elucene-core \u003c/code\u003edependency to start working with Lucene.\u003c/p\u003e\n\u003cp\u003eIf we want to use query parser we can also include the \u003ccode\u003elucene-queryparser\u003c/code\u003e dependency.\u003c/p\u003e\n\u003cp\u003eIn case you want to use any other analyzer than StandardAnalyzer, you will need to add the \u003ccode\u003elucene-analyzers-common\u003c/code\u003e dependency too.\u003c/p\u003e\n\u003cp\u003eIn case of using MAVEN, you can paste the following dependencies in \u003ccode\u003epom.xml\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.lucene\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003elucene-core\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e8.10.1\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.lucene\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003elucene-queryparser\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e8.10.1\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.lucene\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003elucene-analyzers-common\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e8.10.1\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"a-simple-indexer\"\u003eA simple Indexer\u003c/h3\u003e\n\u003cp\u003eWe will create a simple indexer which will add three movies in our lucene index:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.analysis.Analyzer;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.analysis.standard.StandardAnalyzer;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.document.Document;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.document.Field;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.document.TextField;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.index.IndexWriter;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.index.IndexWriterConfig;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.store.Directory;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.store.FSDirectory;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.nio.file.Paths;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * This class creates documents for three movie titles and indexes them into lucene.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSimpleIndexer\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e(String indexPath) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We open a File System directory as we want to store the index on our local file system.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e        Directory directory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Paths.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(indexPath));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//The analyzer is used to perform analysis on text of documents and create the terms that will be\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//added in the index.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e        Analyzer analyzer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StandardAnalyzer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e        IndexWriterConfig indexWriterConfig \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriterConfig(analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e        IndexWriter indexWriter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriter(directory, indexWriterConfig);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Now we create three documents for 3 movies. We have only one Field called title in each document.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e        Document movie1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Document();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e        movie1.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Harry Potter and the Prisoner of Azkaban\u0026#34;\u003c/span\u003e, Field.\u003cspan style=\"color:#a6e22e\"\u003eStore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYES\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e        Document movie2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Document();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e        movie2.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Lord of the Rings: The fellowship of the ring.\u0026#34;\u003c/span\u003e, Field.\u003cspan style=\"color:#a6e22e\"\u003eStore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYES\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e        Document movie3 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Document();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e        movie3.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Toy Story 3\u0026#34;\u003c/span\u003e, Field.\u003cspan style=\"color:#a6e22e\"\u003eStore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYES\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Going to index 3 movies.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Now we add the three documents to our index.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\u003c/span\u003e\u003cspan\u003e        indexWriter.\u003cspan style=\"color:#a6e22e\"\u003eaddDocument\u003c/span\u003e(movie1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\u003c/span\u003e\u003cspan\u003e        indexWriter.\u003cspan style=\"color:#a6e22e\"\u003eaddDocument\u003c/span\u003e(movie2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\u003c/span\u003e\u003cspan\u003e        indexWriter.\u003cspan style=\"color:#a6e22e\"\u003eaddDocument\u003c/span\u003e(movie3);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Movies Indexed Successfully!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\u003c/span\u003e\u003cspan\u003e        indexWriter.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\u003c/span\u003e\u003cspan\u003e        String path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;moviesIndex\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\u003c/span\u003e\u003cspan\u003e        SimpleIndexer indexer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SimpleIndexer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\u003c/span\u003e\u003cspan\u003e        indexer.\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e(path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eOUTPUT\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eGoing to index 3 movies.\nMovies Indexed Successfully!\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"a-simple-searcher\"\u003eA simple Searcher\u003c/h3\u003e\n\u003cp\u003eThen we create a simple searcher which will try to find a movie by title. It will return how many documents it found with matching titles and then print the title of the movie found.\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.analysis.Analyzer;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.analysis.standard.StandardAnalyzer;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.document.Document;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.index.DirectoryReader;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.index.IndexReader;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.queryparser.classic.ParseException;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.queryparser.classic.QueryParser;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.search.IndexSearcher;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.search.Query;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.search.ScoreDoc;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.search.TopDocs;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e org.apache.lucene.store.FSDirectory;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.nio.file.Paths;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * The class looks up a movie in the movies index created by {@SimpleIndexer}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSimpleSearcher\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esearch\u003c/span\u003e(String indexPath, String title) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException, ParseException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We need to open an IndexReader to read the lucene index stored at given indexPath\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e        IndexReader indexReader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e DirectoryReader.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Paths.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(indexPath)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//IndexSearcher will help us query the index\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e        IndexSearcher indexSearcher \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexSearcher(indexReader);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We will use standard analyzer while we parse our query.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e        Analyzer analyzer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StandardAnalyzer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//This query parser will search in title field by default if no field is specified.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Also, this will use our Standard analyzer to create terms for the query.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e        QueryParser queryParser \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e QueryParser(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We pass in the title as it is to the query parser.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// This will create a term query for us on the terms in our title.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e        Query query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e queryParser.\u003cspan style=\"color:#a6e22e\"\u003eparse\u003c/span\u003e(title);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//We perform the search and get top 10 search results.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\u003c/span\u003e\u003cspan\u003e        TopDocs topDocs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e indexSearcher.\u003cspan style=\"color:#a6e22e\"\u003esearch\u003c/span\u003e(query, 10);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Print the count of matching documents.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e totalHits \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e topDocs.\u003cspan style=\"color:#a6e22e\"\u003etotalHits\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\u003c/span\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(String.\u003cspan style=\"color:#a6e22e\"\u003eformat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Found %d hits.\u0026#34;\u003c/span\u003e, totalHits));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Print the title field of each matching movie\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\u003c/span\u003e\u003cspan\u003e        ScoreDoc\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e results  \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e topDocs.\u003cspan style=\"color:#a6e22e\"\u003escoreDocs\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(ScoreDoc scoreDoc: results){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\u003c/span\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e//Returns the id of the document matching the query\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\u003c/span\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e docId \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scoreDoc.\u003cspan style=\"color:#a6e22e\"\u003edoc\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\u003c/span\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e score \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scoreDoc.\u003cspan style=\"color:#a6e22e\"\u003escore\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\u003c/span\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e//We fetch the complete document from index via its id\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\u003c/span\u003e\u003cspan\u003e            Document movie \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e indexSearcher.\u003cspan style=\"color:#a6e22e\"\u003edoc\u003c/span\u003e(docId);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e58\u003c/span\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e//Now we print the title of the movie\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e59\u003c/span\u003e\u003cspan\u003e            System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(String.\u003cspan style=\"color:#a6e22e\"\u003eformat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Found: %s\u0026#34;\u003c/span\u003e, movie.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e)));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e60\u003c/span\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e61\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e62\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e63\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e IOException, ParseException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e64\u003c/span\u003e\u003cspan\u003e        String path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;moviesIndex\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e65\u003c/span\u003e\u003cspan\u003e        SimpleSearcher searcher \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SimpleSearcher();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e66\u003c/span\u003e\u003cspan\u003e        searcher.\u003cspan style=\"color:#a6e22e\"\u003esearch\u003c/span\u003e(path, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Harry Potter\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e67\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e68\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eOUTPUT\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eFound 1 hits.\nFound: Harry Potter and the Prisoner of Azkaban\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBefore we try and understand our code we need to understand some core terminologies.\u003c/p\u003e\n\u003ch2 id=\"core-terminologies\"\u003eCore terminologies\u003c/h2\u003e\n\u003cp\u003eWe will start this Lucene tutorial with a few core terminologies. These will help you understand how to work with Lucene.\u003c/p\u003e\n\u003ch3 id=\"index\"\u003eIndex\u003c/h3\u003e\n\u003cp\u003eAll the documents of similar types are stored in an index. An index can be thought of as a collection. Let’s say you want to search on all articles on Wikipedia, so you will create an index of Wikipedia articles.\u003c/p\u003e\n\u003cp\u003eThose coming from relation databases backgrounds can try to think of Lucene like a table. Just as you keep the records of one type in one table, similarly you keep documents of one type in one index.\u003c/p\u003e\n\u003cp\u003eInternally Lucene uses a data structure known as an inverted index. An inverted index can be thought of as the Glossary section at the end of the book. A Glossary contains words with page numbers at which the word occurs. Similarly, an inverted index is made up of a mapping of words to the list of documents that contains that word. To understand how an inverted index works, I suggest you check out \u003ca href=\"/blog/inverted-index-data-structure/\"\u003ethis article.\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"documents\"\u003eDocuments\u003c/h3\u003e\n\u003cp\u003eA document is the basic unit of search in Lucene. When you do a search in Lucene, the response is the id of the document.\u003c/p\u003e\n\u003cp\u003eDatabase users can think of a document as a record in a table.\u003c/p\u003e\n\u003cp\u003eA document is a collection of fields.\u003c/p\u003e\n\u003ch3 id=\"fields\"\u003eFields\u003c/h3\u003e\n\u003cp\u003eThe field is the subunit of a document. You can think of it as an attribute of a document.\u003c/p\u003e\n\u003cp\u003eLet us say you have a blog and you want to implement a search interface for your blog using Lucene. Each of your blog posts will be a document in the blog-articles index. On each document, you can have multiple fields like a field for title, a field for the body, a field for publishing date, and a field for the author.\u003c/p\u003e\n\u003cp\u003eLucene supports searching for documents by fields. For eg in the blogging example, you can search for all articles written by Ishan. Or you can find all articles that contain the word \u003cem\u003eApple\u003c/em\u003e in the title.\u003c/p\u003e\n\u003ch3 id=\"analysis\"\u003eAnalysis\u003c/h3\u003e\n\u003cp\u003eThe analysis is the process of splitting up text into tokens. These tokens can be single words or they can be a group of words. Each token gets added to the inverted index. When you search in Lucene, Lucene analyses your text and tries to create tokens for it. Then it searches for those tokens in the inverted index.\u003c/p\u003e\n\u003cp\u003eThe analysis is a very important part of Lucene as it can make or break your search experience. The tokens generated at the analysis step while indexing should match the ones generated in the search time analysis of the query. If they do not, then you won’t see correct search results. To understand the analysis process in-depth, check out the article on the analysis here.\u003c/p\u003e\n\u003ch2 id=\"lucene-indexing-api\"\u003eLucene Indexing API\u003c/h2\u003e\n\u003cp\u003eIt’s time to understand the Lucene APIs. We begin by looking at some of the core classes that make up the indexing API\u003c/p\u003e\n\u003ch3 id=\"directory\"\u003eDirectory\u003c/h3\u003e\n\u003cp\u003eA \u003ccode\u003eDirectory\u003c/code\u003e interface abstracts the details of how the index is stored. We have the option of storing the index in local file system, virtual memory or on network drive and even on the heap space on RAM . Given the different places where an index can live, Lucene needs to abstract that detail. This is what is achieved with the \u003ccode\u003eDirectory\u003c/code\u003e interface.\u003c/p\u003e\n\u003cp\u003eSome of the concrete implementations of the \u003ccode\u003eDirectory\u003c/code\u003e interface are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eBytesBufferDirectory\u003c/code\u003e: A ByteBuffer-based Directory implementation that can be used to store index files on the heap.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNMapDirectory\u003c/code\u003e: uses memory-mapped IO when reading. This is a good choice if you have plenty of virtual memory relative to your index size, eg if you are running on a 64 bit JRE, or you are running on a 32 bit JRE but your index sizes are small enough to fit into the virtual memory space.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNIOFSDirectory\u003c/code\u003e: uses java.nio’s FileChannel’s positional io when reading to avoid synchronization when reading from the same file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is suggested to use a File System based directory if you want your index to persist even after your application shuts down. Lucene provides a very helpful \u003ccode\u003eFSDirectory.open\u003c/code\u003e method that automatically selects the best \u003ccode\u003eFSDirectory\u003c/code\u003e implementation for your operating system.\u003c/p\u003e\n\u003cp\u003eThe following code ilustrates how to create a directory that is stored on local file system in a temporary directory called “tempIndex”.\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003ePath indexPath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Files.\u003cspan style=\"color:#a6e22e\"\u003ecreateTempDirectory\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tempIndex\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eDirectory directory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(indexPath);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"field\"\u003eField\u003c/h3\u003e\n\u003cp\u003eA Field is an attribute of a document. Think of this like column value in databases.\u003c/p\u003e\n\u003cp\u003eA field can be of multiple type depending upon the data type of data we want to store. Lucene comes with many prebuilt field classes. Some of the noteworthy classes are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTextField: Use this field type if you want to store some text on which you want full text search capabilites\u003c/li\u003e\n\u003cli\u003eStringField: Use this when you want to do exact search on the string.\u003c/li\u003e\n\u003cli\u003eIntPoint: Use this when you want to add an integer data\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSome of the available subclasses of Field are \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/BinaryDocValuesField.html\"\u003eBinaryDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/BinaryPoint.html\"\u003eBinaryPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/DoubleDocValuesField.html\"\u003eDoubleDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/DoublePoint.html\"\u003eDoublePoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/DoubleRange.html\"\u003eDoubleRange\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/FeatureField.html\"\u003eFeatureField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/Field.html\"\u003eField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/FloatDocValuesField.html\"\u003eFloatDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/FloatPoint.html\"\u003eFloatPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/FloatRange.html\"\u003eFloatRange\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/IntPoint.html\"\u003eIntPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/IntRange.html\"\u003eIntRange\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/LatLonDocValuesField.html\"\u003eLatLonDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/LatLonPoint.html\"\u003eLatLonPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/LongPoint.html\"\u003eLongPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/LongRange.html\"\u003eLongRange\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/NumericDocValuesField.html\"\u003eNumericDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/SortedDocValuesField.html\"\u003eSortedDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/SortedNumericDocValuesField.html\"\u003eSortedNumericDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/SortedSetDocValuesField.html\"\u003eSortedSetDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/StoredField.html\"\u003eStoredField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/codecs/StoredFieldsWriter.MergeVisitor.html\"\u003eStoredFieldsWriter.MergeVisitor\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/StringField.html\"\u003eStringField\u003c/a\u003e, and \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/TextField.html\"\u003eTextField\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou can create a Field as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eField f \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;As you like It\u0026#34;\u003c/span\u003e, Field.\u003cspan style=\"color:#a6e22e\"\u003eStore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYES\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"document\"\u003eDocument\u003c/h3\u003e\n\u003cp\u003eA document is a collection of Fields. You can have a document for one entity. Every attribute of that entity will be the fields on the document. For eg, if you are creating an index of blog posts, you can create a document for each blog post and there will be seperate fields in that document for title, body, author and creation date.\u003c/p\u003e\n\u003cp\u003eHere is a sample code which creates a document and adds some fields to it.\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eDocument doc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Document();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003edoc.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Timon and Pumba\u0026#34;\u003c/span\u003e, Field.\u003cspan style=\"color:#a6e22e\"\u003eStore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYES\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003edoc.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;slogan\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hakuna Matata\u0026#34;\u003c/span\u003e, Field.\u003cspan style=\"color:#a6e22e\"\u003eStore\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eYES\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"indexwriter\"\u003eIndexWriter\u003c/h3\u003e\n\u003cp\u003eOnce we have our document created we need to add it to the Lucene index. \u003ccode\u003eIndexWriter\u003c/code\u003e helps us add our document to the actual Lucene index.\u003c/p\u003e\n\u003cp\u003eAn IndexWriter need and \u003ccode\u003eIndexWriterConfig\u003c/code\u003e and a \u003ccode\u003eDirectory\u003c/code\u003e instance. The Directory tells the IndexWriter how to store the index. The IndexWriterConfig can be used to set various configurations on the IndexWriter like whether you want to append to the index or rewrite it completely, or it can be used to specify the standard analyzer that you want to use and much more.\u003c/p\u003e\n\u003cp\u003eYou can add a document to the index as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eDirectory dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Paths.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index\u0026#34;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eIndexWriterConfig config \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriterConfig();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003eIndexWriter writer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriter(dir, config);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003ewriter.\u003cspan style=\"color:#a6e22e\"\u003eaddDocument\u003c/span\u003e(doc);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"analyzer\"\u003eAnalyzer\u003c/h3\u003e\n\u003cp\u003eAn \u003ccode\u003eAnalyzer\u003c/code\u003e is responsible for converting the text added in document to tokens that can be added to our index. Lucene comes with some prebuilt analyzers that you can use.\u003c/p\u003e\n\u003cp\u003eThe most commonly used Analyzer for English language is \u003ccode\u003eStandardAnalyzer\u003c/code\u003e. This analyzer does the following:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003esplits the text using Word Break rules from the Unicode Text Segmentation algorithm, as specified in \u003ca href=\"http://unicode.org/reports/tr29/\"\u003eUnicode Standard Annex #29\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003econverts the tokens to lowercase and removes common words like a, an, the etc knwon as stop words.\u003c/li\u003e\n\u003cli\u003econvert the words to base form. For eg \u003cem\u003edrinking\u003c/em\u003e will be converted to \u003cem\u003edrink\u003c/em\u003e. This enables searches with term \u003cem\u003edrink\u003c/em\u003e to match the document containing \u003cem\u003edrinking\u003c/em\u003e as well.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou can set an analyzer on the IndexWriter as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eDirectory dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Paths.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index\u0026#34;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eAnalyzer analyzer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StandardAnalyzer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003eIndexWriterConfig config \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriterConfig(analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003eIndexWriter writer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriter(dir, config);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"lucene-search-api\"\u003eLucene Search API\u003c/h2\u003e\n\u003cp\u003eNow that we are familiar with the indexig API, let’s dive right in to the juicy stuff – the search API.\u003c/p\u003e\n\u003ch3 id=\"query\"\u003eQuery\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eQuery\u003c/code\u003e class is the base class for all the types of queries in Lucene. Lucene supports searching for documents in the index based on the types of queries you use. Some of the common query subclasses are:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eTermQuery\u003c/code\u003e: When you know the token you want to find in the index, you need to use the term query. This will return all the documents that contain the term. Please note that the term must be similar to the one produced after analysis.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePhraseQuery\u003c/code\u003e: A term query can only lookup based on individual terms. Sometimes you want to search for words that occur together. Such words are called as a prhase and you can use a \u003ccode\u003ePhraseQuery\u003c/code\u003e to search for a phrase.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSome of the other query types are:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/BlendedTermQuery.html\"\u003eBlendedTermQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/BooleanQuery.html\"\u003eBooleanQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/BoostQuery.html\"\u003eBoostQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/ConstantScoreQuery.html\"\u003eConstantScoreQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/DisjunctionMaxQuery.html\"\u003eDisjunctionMaxQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/DocValuesFieldExistsQuery.html\"\u003eDocValuesFieldExistsQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/IndexOrDocValuesQuery.html\"\u003eIndexOrDocValuesQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/MatchAllDocsQuery.html\"\u003eMatchAllDocsQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/MatchNoDocsQuery.html\"\u003eMatchNoDocsQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/MultiPhraseQuery.html\"\u003eMultiPhraseQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/MultiTermQuery.html\"\u003eMultiTermQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/NGramPhraseQuery.html\"\u003eNGramPhraseQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/NormsFieldExistsQuery.html\"\u003eNormsFieldExistsQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/PointInSetQuery.html\"\u003ePointInSetQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/PointRangeQuery.html\"\u003ePointRangeQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/spans/SpanQuery.html\"\u003eSpanQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/SynonymQuery.html\"\u003eSynonymQuery\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/search/TermInSetQuery.html\"\u003eTermInSetQuery\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe following code creates a query to lookup the word \u003cem\u003epanda\u003c/em\u003e in the \u003cem\u003ebody\u003c/em\u003e field.\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eQuery query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TermQuery(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Term(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;panda\u0026#34;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"query-parser\"\u003eQuery Parser\u003c/h3\u003e\n\u003cp\u003eCreating \u003ccode\u003eQuery\u003c/code\u003e objects is powerful was to do search, but it is quiet verbose. You need to write all the java code. There is an easier ways to create \u003ccode\u003eQuery\u003c/code\u003e object. Lucene comes with a very good query parser. Using a query parse you can write queries as normal text and use the \u003ccode\u003eQueryParser\u003c/code\u003e to create a Query object for you.\u003c/p\u003e\n\u003cp\u003eFor e.g. To create a query to lookup the word \u003cem\u003epanda\u003c/em\u003e in the \u003cem\u003ebody\u003c/em\u003e field using QueryParser use the following code:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eAnalyzer analyzer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StandardAnalyzer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eQueryParser parser \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e QueryParser(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e, analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003eQuery query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e parser.\u003cspan style=\"color:#a6e22e\"\u003eparse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;body:panda\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote here that we needed to pass an \u003ccode\u003eAnalyzer\u003c/code\u003e to \u003ccode\u003eQueryParser\u003c/code\u003e. Lucene will use the passed analyzer to create the terms it needs to lookup. This query time analysis is critcal in the sense that it should produce the same terms that were added to the index at index time. If not done properly you might not see results correctly.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://lucene.apache.org/core/2_9_4/queryparsersyntax.html\"\u003eHere\u003c/a\u003e is the detailed query parser syntax available. I encourage you to read it and give it a try.\u003c/p\u003e\n\u003ch3 id=\"indexreader\"\u003eIndexReader\u003c/h3\u003e\n\u003cp\u003eJust as we used an \u003ccode\u003eIndexWriter\u003c/code\u003e to add documents to the index, we need to use a \u003ccode\u003eIndexReader\u003c/code\u003e to read our index. An \u003ccode\u003eIndexReader\u003c/code\u003e provides low level API that can be used to interact directly with the Lucene index.\u003c/p\u003e\n\u003cp\u003eAn \u003ccode\u003eIndexReader\u003c/code\u003e provides an interface for accessing a point-in-time view of an index. That is it will only show changes as were available at the time the reader was opened. Any other changes made after opening the \u003ccode\u003eIndexReader\u003c/code\u003e won’t be visible.\u003c/p\u003e\n\u003cp\u003eYou can create an \u003ccode\u003eIndexReader\u003c/code\u003e as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eString indexPath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tmp/myIndex\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eIndexReader reader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e DirectoryReader.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(Paths.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(indexPath)));\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"indexsearcher\"\u003eIndexSearcher\u003c/h3\u003e\n\u003cp\u003eWhile an IndexReader provides a low level API to read the internals of the index, IndexSearcher exposes the high level search API. An IndexSearcher can be created by passing in an IndexReader as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eIndexSearcher searcher \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexSearcher(reader);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can then use the IndexSearcher to get top 10 documents in the index that match a query as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eTopDocs topDocs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e indexSearcher.\u003cspan style=\"color:#a6e22e\"\u003esearch\u003c/span\u003e(query, 10);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"topdocs\"\u003eTopDocs\u003c/h3\u003e\n\u003cp\u003eThe output of seach via IndexSearcer is a TopDocs instance. TopDocs contains the total number of documents that matched the query (TopDocs) and an array of search results ( Called ScoreDoc[]). The results are by default sorted by the score with the best matching result coming first and least matching result coming last. You can get these as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e totalHits \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e topDocs.\u003cspan style=\"color:#a6e22e\"\u003etotalHits\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eScoreDoc\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e results  \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e topDocs.\u003cspan style=\"color:#a6e22e\"\u003escoreDocs\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"scoredoc\"\u003eScoreDoc\u003c/h3\u003e\n\u003cp\u003eA ScoreDoc contains the id of the document along with its score. Note that this only contains the id of the document and not the complete document. So if you want the complete document you can get that as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e docId \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scoreDoc.\u003cspan style=\"color:#a6e22e\"\u003edoc\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e score \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scoreDoc.\u003cspan style=\"color:#a6e22e\"\u003escore\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003eDocument doc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e indexSearcher.\u003cspan style=\"color:#a6e22e\"\u003edoc\u003c/span\u003e(docId);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce you have a document you can get its individual field values by using the get method on document. However note that you will get a value only if you specified Field.Store.YES while adding the document to the index.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this blog post we covered an in-depth Lucene tutorial. We understood what Lucene is, how it is different from Solr and Elasticsearch. We then made a simple Lucene application in JAVA and then understood some core concepts of lucene. We ended the tutorial by going over the Indexing and Searching API of Lucene. With this knowledge you are ready to create your own Lucene application. If you have any queries let me know in the comments.\u003c/p\u003e\n\u003ch2 id=\"what-next\"\u003eWhat next?\u003c/h2\u003e\n\u003cp\u003eNow that you know the basics of Lucene, you might be interested in understanding the concepts in depth. \u003ca href=\"/blog/apache-lucene-7-concepts-that-will-help-you-get-started/\"\u003eHere\u003c/a\u003e is a great post explaining the 7 concepts you need to understand to start using Lucene.\u003c/p\u003e\n","description":"","image":"/uploads/2022/01/Apache-Lucene-1-e1648997525598.jpeg","permalink":"http://localhost:1313/blog/apache-lucene-tutorial/","title":"Apache Lucene Tutorial - A simple guide to getting started in 2022"},{"content":"\u003cp\u003eIt is said that the best way to learn a new software technology is to get your hands dirty. Recently I followed this advice when I was learning to be a search engineer. I found myself getting more and more interested in learning how search engines like google and product search engines like Amazon search work. I started learning about information retrieval theory and gradually moved on to practical technologies like Apache Lucene and Apache Solr. While reading books and watching videos was all well and great, I was not sure if I am actually learning real-life skills. So to fix that I thought why not create a search engine of my own and apply the techniques that I am learning. And thus the idea for \u003ca href=\"http://wikisearchengine.com\"\u003ewikisearchengine.com\u003c/a\u003e was born.\u003c/p\u003e\n\u003cp\u003eThe first step in creating the engine was in deciding what do I want to search on? While brainstorming for options I remembered I had read a while ago that complete Wikipedia data is available for download. When I realized this, I thought what better data set to create a search engine than Wikipedia’s. Wikipedia has millions of articles, and creating a search experience on top of this data will be a great learning experience.\u003c/p\u003e\n\u003cp\u003eIf you want to check out the app before reading the article, it is deployed at \u003ca href=\"http://wikisearchengine.com\"\u003ewikisearchengine.com\u003c/a\u003e and the source is available on Github \u003ca href=\"https://github.com/IshanUpmanyu/wikisearchengine\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/03/Screenshot-2022-03-19-at-8.15.22-PM-1_hu211bba31393172b3fa7920b76808ac1a_99307_2254x1638_resize_q75_h2_box_3.webp\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: Wiki Search Engine allows you to search on English Wikipedia articles\u003c/figcaption\u003e\n  \u003c/figure\u003e\u003ch2 id=\"technologies-used-at-a-glance\"\u003e\u0026ldquo;Technologies used at a glance\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eBackend:\u003c/strong\u003e Java 11, SpringBoot, Apache Solr 8\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFront End:\u003c/strong\u003e HTML, Javascript, JQuery, Bootstrap 5\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInfrastructure:\u003c/strong\u003e \u003ca href=\"https://www.digitalocean.com/\"\u003eDigitalOcean\u003c/a\u003e droplets and block storage.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTools:\u003c/strong\u003e Git, Github, Maven\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSome helpful Libraries:\u003c/strong\u003e \u003ca href=\"https://github.com/lintool/wikiclean\"\u003eWikiClean\u003c/a\u003e, \u003ca href=\"https://github.com/lemire/IndexWikipedia\"\u003eIndexWikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"getting-the-wikipedia-data\"\u003eGetting the Wikipedia data\u003c/h2\u003e\n\u003cp\u003eThe first step to creating the search engine is to index that data. To do that we need to grab the data first. I googled how to download Wikipedia data. That’s when I found the wiki dumps website. I found on the website that data is available in database as well as XML format. I didn’t want to run a database so I went for the XML format data which can be downloaded from \u003ca href=\"https://dumps.wikimedia.org/enwiki/latest/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe file I chose to download was a large one almost 20 GB in size. \u003ca href=\"https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2\"\u003eHere\u003c/a\u003e is the link to the file. It is the English Wikipedia article pages data. You get the complete dataset. It has roughly 11.5 million articles and is in XML format.\u003c/p\u003e\n\u003ch2 id=\"parsing-the-english-wikipedia-xml-dump\"\u003eParsing the English Wikipedia XML dump\u003c/h2\u003e\n\u003cp\u003eOnce I had the data the next step was to extract indexable text from it. To do that I needed to be able to read the data. I tried going through the documentation on wiki dumps but did not find anything useful. So I did a google search looking for any library that can read data from Wikipedia XML dumps. I found a few tools but they were for python. Since I am more comfortable with Java, I was looking for something written in Java. Since I am lazy I tried googling if there is a library that directly indexes data to either Solr or Lucene. That’s when I found something useful.\u003c/p\u003e\n\u003cp\u003eI found a project called \u003ca href=\"https://github.com/lemire/IndexWikipedia\"\u003eIndexWikipedia\u003c/a\u003e on Github. This project parses the XML dump file I had downloaded and indexes that using Apache Lucene. I started reading through the source code. I quickly found that it is using code from Lucene benchmarks source library that performs benchmarking on Apache Lucene using Wikipedia data. I found that inside this project there was a parser that can be used to iteratively get articles from the data dump. I found that I can extract the article title, body, page id, and date from the dumps using this parser. Since this is based on the SAX XML parser, this does not load the complete dump in memory and thus can be used with low memory systems as well. I extracted the parser out of the project and that was the beginning of the first piece of the puzzle of WikiSearchEngine – the WikiIndexer.\u003c/p\u003e\n\u003ch2 id=\"removing-wikipedia-text-markup\"\u003eRemoving Wikipedia text markup\u003c/h2\u003e\n\u003cp\u003eThe text as extracted from the XML dump is marked up in Wikipedia markup language. This posed problems for me as it did not generate the tokens correctly. I needed to extract plain text from the data. So I looked for ways to clean this data. That is when I came across \u003ca href=\"https://github.com/lintool/wikiclean\"\u003eWikiClean\u003c/a\u003e. \u003ca href=\"https://github.com/lintool/wikiclean\"\u003eWikiclean\u003c/a\u003e is a very easy-to-use library that provides a simple API. All I had to do was create an object of \u003ca href=\"https://github.com/lintool/wikiclean\"\u003eWikiClean\u003c/a\u003e and pass my raw data to the clean method. The library automatically removed all the Wikipedia markup.\u003c/p\u003e\n\u003ch2 id=\"choosing-the-search-backend--apache-lucene-vs-apache-solr\"\u003eChoosing the search backend – Apache Lucene vs Apache Solr\u003c/h2\u003e\n\u003cp\u003eNow that I had the data, I needed to index it. I had the options of Apache Lucene, Apache Solr, and Elasticsearch. I work in \u003ca href=\"https://algonomy.com/\"\u003eAlgonomy\u003c/a\u003e in the \u003ca href=\"https://algonomy.com/omnichannel-personalization/personalized-ecommerce-search/\"\u003eFind\u003c/a\u003e project which is the personalized search product of the company. There we use Apache Solr. So I thought of picking a technology that will help me in work too. Thus I never considered Elasticserach. Though I must admit, it could have been a good option.\u003c/p\u003e\n\u003cp\u003eI had been reading Lucene in Action and naturally, the idea came to try to use Lucene directly. It also had the advantage of being lighter on resources as compared to Solr. I discussed this with my colleague. He suggested not going with bare-bones Lucene, because Lucene would be much more low level for my use case. I would have to write a lot of code to do even the basic of tasks. Also since we were using Solr in my day job, it would help me learn and get better at my day job too. So I decided to go with Apache Solr.\u003c/p\u003e\n\u003ch2 id=\"indexing-data-in-solr\"\u003eIndexing data in Solr\u003c/h2\u003e\n\u003cp\u003eI read through the Solr documentation to find how to index and search data with Solr. I found I had two options:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIssue HTTP requests direclty to solr.\u003c/li\u003e\n\u003cli\u003eUse the SolrJ library that provides an API to interact with Apache Solr.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI quickly rejected the first option as that would involve a lot of boilerplate code to parse and work with JSON objects. Since I was already planning on using JAVA, SolrJ was the way to go for me.\u003c/p\u003e\n\u003cp\u003eI added SolrJ 8.11 to the pom file. (I was using Maven in my project). Then I went through SolrJ documentation and found how to index data. The steps in indexing are simple:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a collection if it does not exist.\u003c/li\u003e\n\u003cli\u003eIndex data. It is recommended to do batch update rather than doing a document by document update. I quickly created a program to iterate and fetch documents from my wiki parser and index the data in Solr.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn Solr, I added each article I got as a document. Document in Solr can be considered as one record in a database. Just as in a database there are multiple columns Solr documents can have multiple fields. I added 4 fields to each document that I indexed:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eid: the unique id used to indentify the article. This id is later used to create link to the wikipedia page.\u003c/li\u003e\n\u003cli\u003etitle: This was the title of the article.\u003c/li\u003e\n\u003cli\u003ebody: The contents of the article page\u003c/li\u003e\n\u003cli\u003edate: The date the article was added/modified.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"selecting-field-types-for-the-document\"\u003eSelecting Field types for the document\u003c/h3\u003e\n\u003cp\u003eIn Solr, it is very important to select the right field type if you want your search to work correctly. For eg, if you select String instead of Text for a field, you will not be able to search for individual words of the text as Solr would index complete data as one token. I selected the following field types:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eid: I indexed this as String Field sInce I did not want to break this down to tokens as I needed to do an exact match on id.\u003c/li\u003e\n\u003cli\u003etitle: This was indexed as Text field because i wanted full text search to work on this. I wanted that if someone enters only few words from the title, then he should find the article.\u003c/li\u003e\n\u003cli\u003ebody: This was also added as Text Field for the same reasons as for the title.\u003c/li\u003e\n\u003cli\u003edate: Solr has a DateField. Indexing it as Date allows me to do range queries on date field. This would enable the users to filter the serach results by date field.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn Solr, the field types are specified in the Solr schema. I did not want to modify the schema and hence I went with dynamic fields schema\u003c/p\u003e\n\u003ch4 id=\"dynamic-fields\"\u003eDynamic Fields\u003c/h4\u003e\n\u003cp\u003eA \u003ca href=\"https://solr.apache.org/guide/8_11/dynamic-fields.html\"\u003edynamic field\u003c/a\u003e is just like a regular field except it has a name with a wildcard in it. When you are indexing documents, a field that does not match any explicitly defined fields can be matched with a dynamic field. Solr has dynamic fields defined for different data types. For example, if you want to have a field with text type, you can add _t suffix to your field name. Solr will automatically index this as a text field. For string, you can add the suffix _s to the field and this will be indexed as a string field. I created the following field names: title_t, body_t, id, and date_dt, and Solr automatically indexed the field in my desired field type.\u003c/p\u003e\n\u003cp\u003eThus my indexer was completed. I created the indexer as a module called WikiIndexer.\u003c/p\u003e\n\u003cp\u003eNow that indexing was complete it was time to build a search API.\u003c/p\u003e\n\u003ch2 id=\"creating-a-search-api\"\u003eCreating a Search API\u003c/h2\u003e\n\u003cp\u003eNow that I had the data in Solr. I needed to create an API to fetch data. I needed an API for two main reasons.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eI did not want to issue queries to solr from front end directly as that would mean openning access to the solr instance for the complete web. Anyone could modify or delete the solr data if I allowed open access to Solr from the web.\u003c/li\u003e\n\u003cli\u003eHaving a service sit between Solr and the frontend, allows me to write logic for relevancy tunining in backed itself. This would be useful in future when I want to add more features or want to improve the search experience.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI used Spring Boot to create a rest service. The rest service does the following things:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIt takes in the word searched and queries that word in the title and body fields.\u003c/li\u003e\n\u003cli\u003eA match in the title field is 40 times more important than a match in body field. I implemented this by boosting the title field by 20 and decreasing the boost of body field to 0.5.\u003c/li\u003e\n\u003cli\u003eThe API provides paginated access to search results with two parameters: page and resultsPerPage. The backend has restriction that we cannot fetch more than 20 results per page. This is added to prevent a malicious actor from overloading the backend by trying to fetch all the data.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOther than this logic, the search service is really simple.\u003c/p\u003e\n\u003ch2 id=\"the-frontend--making-it-easier-for-anyone-to-use-the-app\"\u003eThe Frontend – making it easier for anyone to use the app\u003c/h2\u003e\n\u003cp\u003eNow that I had the data indexed and an API to get search results, I decided to create a UI so that it becomes simpler to test the search engine. I did not want to spend much time on the front end, so I went with the simplest cleanest UI possible and did so without any heavy frontend framework.\u003c/p\u003e\n\u003cp\u003eI used simple Bootstrap and Jquery to create the front end. Some custom CSS and a logo image are all that were needed to make it work.\u003c/p\u003e\n\u003ch2 id=\"deploying-the-app\"\u003eDeploying the app\u003c/h2\u003e\n\u003cp\u003eNow that the app was ready I had to think about deployment. Since both my indexer and searcher were made with maven, it was fairly simple to create the deployable jar with dependencies.\u003c/p\u003e\n\u003ch3 id=\"creating-the-deployment-package\"\u003eCreating the deployment package\u003c/h3\u003e\n\u003cp\u003eTo avoid having to type java command every time I needed to restart I created simple startup scripts. Also added a config file to change Solr URL or wiki dump file path as per requirement. The only thing needed was to create a deployment package. The maven assembly plugin came to the rescue here and I could get zips for both searcher and indexer.\u003c/p\u003e\n\u003ch3 id=\"choosing-the-cloud-to-deploy-the-app\"\u003eChoosing the cloud to deploy the app\u003c/h3\u003e\n\u003cp\u003eWith the deployment package ready I had to plan how I wanted to deploy my app. I chose to do with DigitalOcean as my cloud. I did not go with AWS free tier as I wanted at least 2 GB of RAM and 100 GB of Disk space. DigitalOcean was the cheapest service for my requirements. Plus I have used this for my personal projects in the past and I liked the experience so far.\u003c/p\u003e\n\u003cp\u003eI created a droplet with 2 GB RAM and 50 GB SSD storage and added 50 GB as additional hard drive storage. With this my infrastructure was ready. I copied the deployment packages on the VM and installed Solr 8 as well. With that done, all that was needed was to set up configurations and start the Indexer and Searcher using start scripts.\u003c/p\u003e\n\u003ch3 id=\"choosing-the-domain-name\"\u003eChoosing the domain name\u003c/h3\u003e\n\u003cp\u003eNow my app was live and I could access it from the web! But I had to remember the IP of my cloud machine. It also did not look as professional to share an IP address with others. I wanted to share a domain name with anyone who wanted to give my app a go. That’s why I decided to go buy a domain.\u003c/p\u003e\n\u003cp\u003eI went to Godaddy and started searching for some domains. I wanted WikiSearch.com but it was already taken. I brainstormed for a while but could not come up with any other good memorable name. Any other name I liked was either too expensive or not available. So I went with wikisearchengine.com. It was available. I purchased the domain. Pointed it to my server and voila within 15 min my app was live at \u003ca href=\"http://wikisearchengine.com\"\u003ehttp://wikisearchengine.com\u003c/a\u003e!\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIt was really fun to build this app. It gives a sense of pride when you see that something you made from scratch is available out there for the world to use.\u003c/p\u003e\n\u003cp\u003eThis project got me started with Solr and I am sure it will help me immensely in becoming a better search engineer. I plan on adding features to it in future like improving relevancy by using tuning ranking or maybe using NLP and machine learning to better understand user intent.\u003c/p\u003e\n\u003cp\u003eIf you have read it so far, I want to thank you! I also encourage you to go visit \u003ca href=\"http://wikisearchengine.com\"\u003ehttp://wikisearchengine.com\u003c/a\u003e and give the app a try. Those wanting to see under the hood, are welcome to check out the source code \u003ca href=\"https://github.com/IshanUpmanyu/wikisearchengine\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAny feedback or feature suggestions would be really appreciated.\u003c/p\u003e\n","description":"","image":"/uploads/2022/03/Screenshot-2022-03-19-at-8.15.22-PM-1.png","permalink":"http://localhost:1313/blog/search-engine-for-wikipedia-articles/","title":"How I created a search engine for Wikipedia articles"},{"content":"\u003cp\u003eYou might have done a google search. Or you might have tried finding that favorite Ed Sheeran Video on Youtube. You may have tried finding the latest gadget you crave on Amazon. If your answer to any of the above questions was yes, you have already used an inverted index.\u003cbr\u003e\nThese websites work with millions and billions of web pages, songs, or products. Have you wondered how the results appear so fast? It happens because these websites have already built an inverted index of the information. When you search for something, instead of reading all the documents from starting to end, these sites lookup in an inverted index data structure.\u003c/p\u003e\n\u003ch2 id=\"what-is-an-inverted-index-in-information-retrieval\"\u003eWhat is an inverted index in information retrieval\u003c/h2\u003e\n\u003cp\u003eAn inverted index data structure allows you to find the information you are looking for in a fast and efficient manner. It does this by indexing the words contained in a document. But you must be wondering if we are simply indexing the document then why call it an “inverted” index?\u003c/p\u003e\n\u003ch2 id=\"why-is-it-called-an-inverted-index\"\u003eWhy is it called an “inverted” index?\u003c/h2\u003e\n\u003cp\u003eIn a normal structure, we have a document that contains words. So to find the word you read the complete document from beginning to end and stop when you find a word. But if our intent is to find if a document contains a word, we can do better.\u003c/p\u003e\n\u003cp\u003eInstead of storing documents to word mapping, an inverted index inverts this process. i.e it stores a mapping for words to document. We have a word that points to the list of documents that contains that word. So now if you want to find all documents that contain a word, we have that available as a list. In this way we have “inverted” the process and hence we call it an inverted index.\u003c/p\u003e\n\u003ch2 id=\"how-to-create-an-inverted-index\"\u003eHow to create an inverted index\u003c/h2\u003e\n\u003cp\u003eLet’s dive deep and understand the structure of an inverted index data structure. But before we do that, let’s assume we want to add the following documents in our index:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocument1: My name is Ishan Upamanyu\u003c/li\u003e\n\u003cli\u003eDocument2: Abhishek Upmanyu is a great comedian\u003c/li\u003e\n\u003cli\u003eDocument3: I would like to name my dog as Bruno\u003c/li\u003e\n\u003cli\u003eDocument4: Alexander the great.\u003c/li\u003e\n\u003cli\u003eDocument5: Abhishek is studying in Delhi.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBefore we insert the words into our index, we need to do some pre-processing.\u003c/p\u003e\n\u003ch2 id=\"preprocessing-before-creating-the-index\"\u003ePreprocessing before creating the index\u003c/h2\u003e\n\u003ch3 id=\"tokenization\"\u003eTokenization\u003c/h3\u003e\n\u003cp\u003eA document contains sentences. We need to break the sentences down into individual tokens. A token is the smallest unit that we can insert in our inverted index. We may split different words into different terms or we may split many words into a single token depending on our need. For eg: Consider the phrase: “I live in New Delhi”. We can break it into the following tokens:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e[I, live, in, New, Delhi]\u003cbr\u003e\nor\u003c/li\u003e\n\u003cli\u003e[I, live, in, New Delhi]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe documents we have will be broken down into the following tokens:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocument1: [My, name, is, Ishan, Upamanyu]\u003c/li\u003e\n\u003cli\u003eDocument2: [Abhishek, Upmanyu, is, a, great, comedian]\u003c/li\u003e\n\u003cli\u003eDocument3: [I, would, like, to, name, my, dog, as, Bruno]\u003c/li\u003e\n\u003cli\u003eDocument4: [Alexander, the, great.]\u003c/li\u003e\n\u003cli\u003eDocument5: [Abhishek, is, studying, in, Delhi.]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce we have our individual tokens, we proceed to the next step.\u003c/p\u003e\n\u003ch3 id=\"stop-words\"\u003eStop Words\u003c/h3\u003e\n\u003cp\u003eWe often have a lot of words like “a”, “and”, “the”, “is” etc that are used very frequently in language . These would not add much meaning to the search query. We can choose to remove these words from our tokens so that they are not added in the inverted index. These words that we want to remove are known as \u003cem\u003estop words\u003c/em\u003e. We may also want to remove punctuation in this step.\u003c/p\u003e\n\u003cp\u003eThe output of this step would be:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocument1: [My, name, Ishan, Upamanyu]\u003c/li\u003e\n\u003cli\u003eDocument2: [Abhishek, Upmanyu, great, comedian]\u003c/li\u003e\n\u003cli\u003eDocument3: [I, would, like, to, name, my, dog, as, Bruno]\u003c/li\u003e\n\u003cli\u003eDocument4: [Alexander, great]\u003c/li\u003e\n\u003cli\u003eDocument5: [Abhishek, studying, Delhi]\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"stemming\"\u003eStemming\u003c/h3\u003e\n\u003cp\u003eWe have a document containing the word “studying”. But suppose someone searches for the word “study”. Our index would not contain the queried word and we would fail to return a relevant document. So to solve this problem we convert the tokens to their root form. Stemming is the first way to do this. Stemming tries to remove the last few characters of the token to try and guess the right root word. For e.g, the words “care” and “caring” would be converted to the word “car” as stemming removed the last few correctors.\u003c/p\u003e\n\u003cp\u003eAs you may have noticed, stemming might result in unexpected output. Like our searches for the word “car” would start to match with the documents containing the word “care”. This would happen because “care” is stemmed down to “car”. This is not what we want. We solve this problem with Lemmatization.\u003c/p\u003e\n\u003ch3 id=\"lemmatization\"\u003eLemmatization\u003c/h3\u003e\n\u003cp\u003eLemmatization converts the token to its meaningful base form. Like it would convert “caring” to “care” and not “car”. It does this by using dictionaries and doing a morphological analysis to reach the base form known as \u003cem\u003eLemma\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSome search systems also standardize the case of the token. They might convert all tokens to lower case. This has an advantage. Searches will start to match regardless of the case difference in document and query. For e.g. searching for “upmanyu” would match the document containing the word “Upmanyu”\u003c/p\u003e\n\u003cp\u003eAfter completing all the preprocessing, our tokens look as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocument1: [my, name, ishan, upmanyu]\u003c/li\u003e\n\u003cli\u003eDocument2: [abhishek, upmanyu, great, comedian]\u003c/li\u003e\n\u003cli\u003eDocument3: [i, would, like, to, name, my, dog, as, bruno]\u003c/li\u003e\n\u003cli\u003eDocument4: [alexander, great]\u003c/li\u003e\n\u003cli\u003eDocument5: [abhishek, study, delhi]\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"building-inverted-index\"\u003eBuilding inverted index\u003c/h2\u003e\n\u003cp\u003eNow that we have our pre-processing done, we can start building our inverted index data structure.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep 1:\u003c/strong\u003e First of all we create a table with a list of all the words and the document in which they occur.\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/01/token-doc-id-mapping_hubadca0830476e33227cdb576daaa4ede_40150_1300x1172_resize_q75_h2_box_3.webp\" alt=\"word to doc id mapping\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: Create the word to doc id mapping \u003c/figcaption\u003e\n  \u003c/figure\u003e\u003cp\u003e\u003cstrong\u003eStep 2:\u003c/strong\u003e Now we try to group words together sort them and note their frequency. Also, for the same word, we put the document id in a list and sort this list of document ids. The result now looks like this:\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/01/inverted-index_hue20a64c8a9c74290b3c17e241162f4c4_105386_2000x1234_resize_q75_h2_box_3.webp\" alt=\"Documents and Postings - the internals of inverted index data structure\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: Documents and Postings – the internals of inverted index data structure\u003c/figcaption\u003e\n  \u003c/figure\u003e\u003cp\u003eThis is the structure of our inverted index data structure. As you can see, it has two main components:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDictionary\u003c/li\u003e\n\u003cli\u003ePosting List\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"dictionary-and-postings\"\u003eDictionary and Postings\u003c/h3\u003e\n\u003cp\u003eThe part of the index which contains the word with its frequency is called a dictionary. It also stores a pointer to the list of documents containing that word. This list is called Postings. Each token stored in our dictionary is called a term. We can store the dictionary as an array or as a map depending on the implementation.\u003c/p\u003e\n\u003cp\u003eIn array representation, we use binary search to find the token we are looking for. In a map implementation, we use hashing to find the token. We will soon see this in action when we see how we do retrieval, i.e. find documents matching our query using an inverted index data structure.\u003c/p\u003e\n\u003ch4 id=\"token-vs-term\"\u003eToken vs Term\u003c/h4\u003e\n\u003cp\u003eA token is an output of splitting the sentence into smaller chunks. All these chunks will not become a part of our index. We may remove some of them or convert some of them to their root form as we saw in pre-processing step.\u003c/p\u003e\n\u003cp\u003eA term is an actual entry that gets added in the inverted index dictionary. It is what is actually present in the index.\u003c/p\u003e\n\u003ch2 id=\"how-to-use-the-inverted-index-to-find-what-we-are-looking-for\"\u003eHow to use the inverted index to find what we are looking for\u003c/h2\u003e\n\u003cp\u003eNow we know the internal structure of an inverted index data strucure. We also know how it is created. The next step is trying to understand how we can find the documents of interest in our inverted index data structure.\u003c/p\u003e\n\u003cp\u003eLet’s say we want to find all documents matching our search query.\u003c/p\u003e\n\u003ch3 id=\"finding-all-documents-that-match-a-boolean-query\"\u003eFinding all documents that match a boolean query.\u003c/h3\u003e\n\u003cp\u003eBoolean retrieval deals with queries combining multiple terms using Boolean operators. Boolean operators are AND, OR, NOT. For e.g. we may issue the following query: \u003cem\u003eishan AND upmanyu\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWith this query, we want to get the documents that contain both the search terms i.e. \u003cem\u003eishan\u003c/em\u003e and \u003cem\u003eupmanyu\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eTo process this we use the following steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSearch for \u003cem\u003eishan\u003c/em\u003e in the Dictionary.\u003c/li\u003e\n\u003cli\u003eLocate its postings.\u003c/li\u003e\n\u003cli\u003eSearch for \u003cem\u003eupmanyu\u003c/em\u003e in the Dictionary.\u003c/li\u003e\n\u003cli\u003eLocate its postings.\u003c/li\u003e\n\u003cli\u003eIntersect the two postings.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor our inverted index, the process looks as follows:\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/01/dictionary-to-posting_huee81a7ebaa0b7a6a70844f0be8297bea_31354_904x474_resize_q75_h2_box_3.webp\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: Answering Boolean AND Queries\u003c/figcaption\u003e\n  \u003c/figure\u003e\u003cp\u003eSo for this query, we will return only \u003cem\u003eDocument1\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSimilarly, for the query \u003cem\u003eishan\u003c/em\u003e OR \u003cem\u003eupmanyu\u003c/em\u003e we do the following steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSearch for \u003cem\u003eishan\u003c/em\u003e in the Dictionary.\u003c/li\u003e\n\u003cli\u003eLocate its postings.\u003c/li\u003e\n\u003cli\u003eSearch for \u003cem\u003eupmanyu\u003c/em\u003e in the Dictionary.\u003c/li\u003e\n\u003cli\u003eLocate its postings.\u003c/li\u003e\n\u003cli\u003eTake the union of the two postings.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/01/union_hu3892149933e0f8a5739ebf55dc8bd13f_29464_860x422_resize_q75_h2_box_3.webp\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: Ansering boolean OR queries\u003c/figcaption\u003e\n  \u003c/figure\u003e\u003cp\u003eSo for this query, we will return both \u003cem\u003eDocument1\u003c/em\u003e and \u003cem\u003eDocument2\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEXERCISE:\u003c/strong\u003e Try thinking about how NOT operator will be implemented and write your answer down in the comments.\u003c/p\u003e\n\u003cp\u003eThus we conclude how to find something in an inverted index data structure.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this article, we understood in detail what an inverted index data structure is. We understood the internal structure of the inverted index data structure. We also covered how the inverted index data structure is created and how it can be used to find the information we are looking for.\u003c/p\u003e\n\u003ch2 id=\"what-next\"\u003eWhat next?\u003c/h2\u003e\n\u003cp\u003eNow that you understand what an inverted index data structure is and how it works aren’t you curious that how is it used to rank results in a search engine? The answer is the vector space model of Information Retrieval. I recommend you read all about it \u003ca href=\"/blog/how-search-scoring-algorithm-works/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA first take at building an inverted index: \u003ca href=\"https://nlp.stanford.edu/IR-book/html/htmledition/a-first-take-at-building-an-inverted-index-1.html\"\u003ehttps://nlp.stanford.edu/IR-book/html/htmledition/a-first-take-at-building-an-inverted-index-1.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBoolean Retrieval: \u003ca href=\"https://nlp.stanford.edu/IR-book/html/htmledition/boolean-retrieval-1.html\"\u003ehttps://nlp.stanford.edu/IR-book/html/htmledition/boolean-retrieval-1.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDifference Between Stemming and Lemmatization: \u003ca href=\"https://stackoverflow.com/questions/1787110/what-is-the-difference-between-lemmatization-vs-stemming#:~:text=Stemming%20just%20removes%20or%20stems,form%2C%20which%20is%20called%20Lemma\"\u003ehttps://stackoverflow.com/questions/1787110/what-is-the-difference-between-lemmatization-vs-stemming#:~:text=Stemming just removes or stems,form%2C which is called Lemma\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n","description":"","image":"/uploads/2022/01/inverted-index.png","permalink":"http://localhost:1313/blog/inverted-index-data-structure/","title":"How the inverted index data structure works - The detailed explanation you wanted."},{"content":"\u003cp\u003eApache Lucene is a popular information retrieval library written in JAVA. It helps you add full-text search capability to your application. This library is at the heart of search servers like Elasticsearch and Apache Solr.\u003c/p\u003e\n\u003cp\u003eIt was created in 1999 by \u003ca href=\"https://en.wikipedia.org/wiki/Doug_Cutting\"\u003eDoug Cutting\u003c/a\u003e, who also created Apache Hadoop, and is now \u003ca href=\"https://lucene.apache.org/\"\u003ea top-level Apache Project.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou can use Apache Lucene to create your own search application which can include features like term matching, phrase matching, fuzzy search, proximity search, and much more.\u003c/p\u003e\n\u003cp\u003eIf you have been working with Elasticsearch or Apache Solr, then understanding Apache Lucene will help you to grasp how these technologies work.\u003c/p\u003e\n\u003cp\u003eTo help you begin your learning journey, here are 7 concepts that will get you familiar with Apache Lucene.\u003c/p\u003e\n\u003ch2 id=\"inverted-index--the-reason-lucene-is-so-fast\"\u003eInverted Index – The reason Lucene is so fast\u003c/h2\u003e\n\u003cp\u003eLucene enables super-fast text search by using a special data structure known as the \u003ca href=\"/blog/inverted-index-data-structure?utm_source=lucene-basic-concepts\u0026amp;utm_medium=www.ishanupamanyu.com\u0026amp;utm_campaign=internal-linking\"\u003einverted index\u003c/a\u003e. Instead of having to look for text in sequential order in all the documents, Lucene pre-creates an inverted index of the documents.\u003c/p\u003e\n\u003cp\u003eYou can imagine this inverted index to be similar to the glossary you find at the end of a book. The glossary at end of a book contains references to the page numbers where a word occurred. Similarly, the inverted index contains a mapping of terms and a list of documents containing that term.\u003c/p\u003e\n\u003cp\u003eFor example, consider the following documents:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocument1: My name is Ishan Upamanyu\u003c/li\u003e\n\u003cli\u003eDocument2: Abhishek Upmanyu is a great comedian\u003c/li\u003e\n\u003cli\u003eDocument3: I would like to name my dog as Bruno\u003c/li\u003e\n\u003cli\u003eDocument4: Alexander the great.\u003c/li\u003e\n\u003cli\u003eDocument5: Abhishek is studying in Delhi.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf these documents are indexed in an inverted index, the index will look like this:\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/01/Apache-Lucene-Inverted-index_hu1bde6f16ec37cf9710a95834d71ffc40_26012_1526x1618_resize_q75_h2_box_3.webp\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: Apache Lucene creates an inverted index of the documents it indexes.\u003c/figcaption\u003e\n  \u003c/figure\u003e\u003cp\u003eThe inverted index has two components:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDictionary: This contains all the terms in the index along with their frequency\u003c/li\u003e\n\u003cli\u003ePostings: This is the list of documents that contains the terms. In addition, the postings might also store information about where the word occurred in the document.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo understand how Lucene returns results using the inverted index, read the article on the inverted index \u003ca href=\"/blog/inverted-index-data-structure?utm_source=lucene-basic-concepts\u0026amp;utm_medium=www.ishanupamanyu.com\u0026amp;utm_campaign=internal-linking\"\u003ehere\u003c/a\u003e, followed by the article on how scoring works \u003ca href=\"/blog/how-search-scoring-algorithm-works?utm_source=lucene-basic-concepts\u0026amp;utm_medium=www.ishanupamanyu.com\u0026amp;utm_campaign=internal-linking\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"fields-and-documents--the-building-blocks-of-your-search-system\"\u003eFields and Documents – The building blocks of your search system\u003c/h2\u003e\n\u003cp\u003eWhen you start working with Apache Lucene, you will come across two terms: Field and Document. These are the ways in which you describe your data to Lucene.\u003c/p\u003e\n\u003ch4 id=\"fields\"\u003eFields\u003c/h4\u003e\n\u003cp\u003eFields are the most basic unit in Apache Lucene. You can consider a field as a column. You can store information about your data using fields. For e.g. let us say you are indexing novels written by multiple authors. You can have separate fields for Author Name, Title of the Novel, the publishing date, and so on.\u003c/p\u003e\n\u003cp\u003eA field is made of 3 parts:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eName: This is used to identify the field\u003c/li\u003e\n\u003cli\u003eType: This describes the various properties of the field. It is a subclass of \u003ca href=\"https://lucene.apache.org/core/7_3_1/core/org/apache/lucene/index/IndexableFieldType.html\"\u003eIndexableFieldType\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eData: This is what the field holds. It can be a normal text, a number, or even a binary value.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo help you get started, Lucene has already created different types of fields. You can read about them in the \u003ca href=\"https://lucene.apache.org/core/7_3_1/core/org/apache/lucene/document/Field.html\"\u003efield documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSome of the available subclasses of Field are \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/BinaryDocValuesField.html\"\u003eBinaryDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/BinaryPoint.html\"\u003eBinaryPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/DoubleDocValuesField.html\"\u003eDoubleDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/DoublePoint.html\"\u003eDoublePoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/DoubleRange.html\"\u003eDoubleRange\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/FeatureField.html\"\u003eFeatureField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/Field.html\"\u003eField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/FloatDocValuesField.html\"\u003eFloatDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/FloatPoint.html\"\u003eFloatPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/FloatRange.html\"\u003eFloatRange\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/IntPoint.html\"\u003eIntPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/IntRange.html\"\u003eIntRange\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/LatLonDocValuesField.html\"\u003eLatLonDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/LatLonPoint.html\"\u003eLatLonPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/LongPoint.html\"\u003eLongPoint\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/LongRange.html\"\u003eLongRange\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/NumericDocValuesField.html\"\u003eNumericDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/SortedDocValuesField.html\"\u003eSortedDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/SortedNumericDocValuesField.html\"\u003eSortedNumericDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/SortedSetDocValuesField.html\"\u003eSortedSetDocValuesField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/StoredField.html\"\u003eStoredField\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/codecs/StoredFieldsWriter.MergeVisitor.html\"\u003eStoredFieldsWriter.MergeVisitor\u003c/a\u003e, \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/StringField.html\"\u003eStringField\u003c/a\u003e, and \u003ca href=\"https://lucene.apache.org/core/8_1_1/core/org/apache/lucene/document/TextField.html\"\u003eTextField\u003c/a\u003e\u003c/p\u003e\n\u003ch5 id=\"indexablefieldtypes--the-properties-of-fields\"\u003eIndexableFieldTypes – the properties of fields\u003c/h5\u003e\n\u003cp\u003eThere are a few details you need to know when working with Fields. Unless explicitly specified, Lucene will not keep the original text of the field. If you want that it should return the original text of the field that matched your query, then you need to tell this explicitly to Lucene by using and implementable of \u003ccode\u003eIndexableFieldType\u003c/code\u003e. The commonly used subtype of this interface is \u003ccode\u003eFieldType\u003c/code\u003e\u003cbr\u003e\nThe following methods of \u003ccode\u003eFieldType\u003c/code\u003e are noteworthy\u003cbr\u003e\n\u003ccode\u003epublic void setStored(boolean value)\u003c/code\u003e: This method can be used to store the original text of the field.\u003cbr\u003e\n\u003ccode\u003epublic void setTokenized(boolean value)\u003c/code\u003e: If tokenized is set to true only then the field will be analyzed by the \u003ccode\u003eAnalyzer\u003c/code\u003e. Don’t worry we will cover the analysis concept shortly.\u003cbr\u003e\n\u003ccode\u003epublic void setIndexOptions(IndexOptions value)\u003c/code\u003e: This method is used to control the information that should be stored in the inverted index. Check out the \u003ccode\u003eIndexOptions\u003c/code\u003e enum \u003ca href=\"https://lucene.apache.org/core/8_8_2/core/org/apache/lucene/index/IndexOptions.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNote that this can also be used to control advanced aspects like DocTypes and Term Vectors which are beyond the scope of this article.\u003c/p\u003e\n\u003cp\u003eYou can check out other methods of \u003ccode\u003eFieldType\u003c/code\u003e class \u003ca href=\"https://lucene.apache.org/core/8_8_2/core/org/apache/lucene/document/FieldType.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"documents\"\u003eDocuments\u003c/h4\u003e\n\u003cp\u003eA document is a collection of fields. You can consider it as a record in a database table. When you search for something, Lucene tries to find the document in which matching data is present. In our example when you indexed all novels, each novel record is a Document in Lucene.\u003c/p\u003e\n\u003cp\u003eSo to index your data, you have to think about what fields each document will contain. You can describe this to Lucene using the following code:\u003c/p\u003e\n\u003cp\u003eTo create a document use:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eDocument doc = new Document();\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow create a field. Here we will use an already created field class. The first constructor argument is the name of the field. The second argument is the content that we want to store. Ignore the last constructor argument, for now, you will understand this when we cover IndexableFieldType.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eField pathField = new StringField(\u0026quot;path\u0026quot;, file.toString(), Field.Store.YES);\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOnce you have a field, you need to add it to the document.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edoc.add(pathField);\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"analyzer--preprocessing-for-indexed-data-and-search-queries\"\u003eAnalyzer – Preprocessing for indexed data and search queries\u003c/h2\u003e\n\u003ch5 id=\"what-is-analysis\"\u003eWhat is Analysis?\u003c/h5\u003e\n\u003cp\u003eWe know that Lucene stores data in an inverted index. Remember that inverted index stores terms in its dictionary. But what we give to Lucene is plain text. So how does Lucene convert this text to terms of the inverted index? This is done by a process known as Analysis. The analysis is done both at indexing time for the fields of the document that is indexed, and also at the Query time for the query so that Lucene can find the terms it needs to look up in the inverted index.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Lucene does not care about parsing your documents. Your document can be in any format be it PDF, DOC, EXCEL, etc. But Lucene does not understand these formats. Before you can index this data, you need to convert this into plain text format. This process is known as \u003cem\u003eparsing\u003c/em\u003e. Lucene does not handle parsing. Parsing the data is the format of the application using Lucene.\u003c/p\u003e\n\u003ch5 id=\"tokenization\"\u003eTokenization\u003c/h5\u003e\n\u003cp\u003eThe process of converting the text into smaller chunks ( known as Tokens) for adding in the inverted index is known as Tokenization. This can include various steps like removing extra spaces, removing stop words, converting the words to the root stems, lowercasing the tokens, etc. Some of these steps are done before converting the text to tokens, in which case these are PreTokenization steps. Others are done after we convert them to smaller tokens, in which case they are known as PostTokenization steps.\u003c/p\u003e\n\u003cp\u003ePre-tokenization analysis can include, among other things, removing HTML markup, and converting or removing text matching arbitrary patterns or sets of fixed strings.\u003c/p\u003e\n\u003cp\u003eMany post-tokenization steps can also be done, including (but not limited to):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Stemming\"\u003eStemming\u003c/a\u003e – Replacing words with their stems. For instance with English stemming “bikes” is replaced with “bike”; now query “bike” can find both documents containing “bike” and those containing “bikes”.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Stop_words\"\u003eStop Words Filtering\u003c/a\u003e – Common words like “the”, “and” and “a” rarely add any value to a search. Removing them shrinks the index size and increases performance. It may also reduce some “noise” and actually improve search quality.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Text_normalization\"\u003eText Normalization\u003c/a\u003e – Stripping accents and other character markings can make for better searching.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Synonym\"\u003eSynonym Expansion\u003c/a\u003e – Adding in synonyms at the same token position as the current word can mean better matching when users search with words in the synonym set.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"analyzer-components\"\u003eAnalyzer components\u003c/h5\u003e\n\u003cp\u003eThe analyzer performs its job, by chaining multiple components together. These components are as follows:\u003c/p\u003e\n\u003ch6 id=\"charfilter\"\u003eCharFilter\u003c/h6\u003e\n\u003cp\u003eA char filter is used to perform PreTokenization steps like removing extra spaces or stripping HTML or any other conversion that you want to do to your text before converting it into tokens. Lucene provides some inbuilt CharFilter implementations like \u003ca href=\"https://javadoc.io/static/org.apache.lucene/lucene-analyzers-common/8.8.2/org/apache/lucene/analysis/cjk/CJKWidthCharFilter.html\"\u003eCJKWidthCharFilter\u003c/a\u003e, \u003ca href=\"https://javadoc.io/static/org.apache.lucene/lucene-analyzers-common/8.8.2/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.html\"\u003eHTMLStripCharFilter\u003c/a\u003e, \u003ca href=\"https://javadoc.io/static/org.apache.lucene/lucene-analyzers-common/8.8.2/org/apache/lucene/analysis/charfilter/MappingCharFilter.html\"\u003eMappingCharFilter\u003c/a\u003e, and \u003ca href=\"https://javadoc.io/static/org.apache.lucene/lucene-analyzers-common/8.8.2/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter.html\"\u003ePatternReplaceCharFilter\u003c/a\u003e.\u003c/p\u003e\n\u003ch6 id=\"tokenizer\"\u003eTokenizer\u003c/h6\u003e\n\u003cp\u003eA \u003ccode\u003eTokenizer\u003c/code\u003e is what converts the text into individual tokens. It is a subclass of \u003ccode\u003eTokenStream\u003c/code\u003e. You can think of \u003ccode\u003eTokenStream\u003c/code\u003e as something which will help you get your tokens. In many cases, where \u003ccode\u003eCharFilter\u003c/code\u003e is not used, the \u003ccode\u003eTokenizer\u003c/code\u003e is the first step of the analysis process.\u003c/p\u003e\n\u003ch6 id=\"tokenfilter\"\u003eTokenFilter\u003c/h6\u003e\n\u003cp\u003eA \u003ccode\u003eTokenFilter\u003c/code\u003e is also a subclass of \u003ccode\u003eTokenStream\u003c/code\u003e. It is used to modify the tokens that are generated by the \u003ccode\u003eTokenizer\u003c/code\u003e. Some common operations performed by a \u003ccode\u003eTokenFilter\u003c/code\u003e are deletion, stemming, synonym injection, and case folding.\u003c/p\u003e\n\u003ch5 id=\"commonly-used-lucene-analyzers\"\u003eCommonly used Lucene Analyzers\u003c/h5\u003e\n\u003cp\u003eHere are some Analyzers that come built-in in Apache Lucene\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://javadoc.io/static/org.apache.lucene/lucene-analyzers-common/8.8.2/org/apache/lucene/analysis/core/WhitespaceAnalyzer.html\"\u003eWhitespaceAnalyzer\u003c/a\u003e: This breaks the text on WhiteSpaces. The logic for what is considered whitespace can be found \u003ca href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html?is-external=true#isWhitespace-int-\"\u003ehere\u003c/a\u003e. This does not perform any case change.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://javadoc.io/static/org.apache.lucene/lucene-analyzers-common/8.8.2/org/apache/lucene/analysis/core/StopAnalyzer.html\"\u003eStopAnalyzer\u003c/a\u003e: This analyzer can help you to remove stop words from the text. It breaks the text using \u003ccode\u003eLetterTokenizer\u003c/code\u003e which divides text at non-letters. Further, it lowercases the token using \u003ccode\u003eLowerCaseFilter\u003c/code\u003e and removes stop word provided using \u003ccode\u003eStopFilter\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://lucene.apache.org/core/8_8_2/core/org/apache/lucene/analysis/standard/StandardAnalyzer.html\"\u003eStandardAnalyzer\u003c/a\u003e: This analyzer tries to identify word boundaries as it uses \u003ccode\u003eStandardTokenizer\u003c/code\u003e. \u003ccode\u003eStandardTokenizer\u003c/code\u003e implements the Word Break rules from the Unicode Text Segmentation algorithm, as specified in \u003ca href=\"https://unicode.org/reports/tr29/\"\u003eUnicode Standard Annex #29\u003c/a\u003e. It further uses \u003ccode\u003eLowerCaseFilter\u003c/code\u003e to convert tokens to lower case and removes stop words using \u003ccode\u003eStopFilter\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThere are many more analyzers that are already created by Lucene. They are part of the \u003ca href=\"https://javadoc.io/static/org.apache.lucene/lucene-analyzers-common/8.8.2/overview-summary.html\"\u003eanalyzers-common API\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"exploring-the-lucene-api\"\u003eExploring the Lucene API\u003c/h2\u003e\n\u003cp\u003eNow that we know the basic concepts about Lucene, we are ready to write the code. In this section, we will explore few concepts that are related to the Lucene API.\u003c/p\u003e\n\u003ch3 id=\"indexwriter--writing-data-to-lucene-indexes\"\u003eIndexWriter – Writing data to Lucene indexes\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eIndexWriter\u003c/code\u003e is the main class that is used to create an index in Lucene. It is used to add documents to the index. To create an \u003ccode\u003eIndexWriter\u003c/code\u003e, we need two components: a \u003ccode\u003eDirectory\u003c/code\u003e and a \u003ccode\u003eIndexWriterConfig\u003c/code\u003e. Further, \u003ccode\u003eIndexWriterConfig\u003c/code\u003e is used to specify the analyzer that we want to use. Let’s use \u003ccode\u003eStandardAnalyzer\u003c/code\u003e for our example.\u003c/p\u003e\n\u003cp\u003eHere is a sample code. Here we create Document with a single Field. We want to return the complete value of this field when we return the results. So we create a stored field.\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003eAnalyzer analyzer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StandardAnalyzer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003ePath indexPath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Files.\u003cspan style=\"color:#a6e22e\"\u003ecreateTempDirectory\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tempIndex\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003eDirectory directory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(indexPath)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003eIndexWriterConfig config \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriterConfig(analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003eIndexWriter iwriter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriter(directory, config);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003eDocument doc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Document();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003eString text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is the text to be indexed.\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003edoc.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Field(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e, text, TextField.\u003cspan style=\"color:#a6e22e\"\u003eTYPE_STORED\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003eiwriter.\u003cspan style=\"color:#a6e22e\"\u003eaddDocument\u003c/span\u003e(doc);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003eiwriter.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"queryparser--make-lucene-understand-what-you-want-to-search\"\u003eQueryParser – Make Lucene understand what you want to search\u003c/h3\u003e\n\u003cp\u003eNow that we have a document indexed, we will want to search it. But before we can do that, we need to make Lucene understand our query. This is done by \u003ccode\u003eQueryParser\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLet’s consider an example. Consider the simple query: “\u003cem\u003epath\u003c/em\u003e“. This is a simple term query. This will try searching for the string “path” in the default field specified while creating the query. Lucene also supports searching by specifying a field explicitly. To do this you can issue a query in the format: \u0026lt;fieldName\u0026gt;:\u0026lt;query term\u0026gt;. eg: description: text. This will search for string “text” only in the description field. There are many other ways you can issue a query. The details of the Lucene query format can be seen \u003ca href=\"https://lucene.apache.org/core/8_0_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package.description\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe job of \u003ccode\u003eQueryParser\u003c/code\u003e is to understand this query and construct the \u003ccode\u003eQuery\u003c/code\u003e class that will be needed to actually run this query. You can use the query parser as:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eQueryParser parser \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e QueryParser(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e, analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eQuery query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e parser.\u003cspan style=\"color:#a6e22e\"\u003eparse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote: In this example since we have not specified any field, it will search in the default field “description” only.\u003c/p\u003e\n\u003ch3 id=\"indexsearcher--searching-for-documents-in-your-index\"\u003eIndexSearcher – Searching for documents in your index\u003c/h3\u003e\n\u003cp\u003eOnce you have a Query, you can use IndexSearcher to run the query. This is the class that actually runs the query against the Lucene indexes and it gives you results in a TopDocs object. This object contains the documents that matched your query in form of an array of ScoreDoc objects.\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eDirectoryReader ireader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e DirectoryReader.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(directory);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eIndexSearcher isearcher \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexSearcher(ireader);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003eScoreDoc\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e hits \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e isearcher.\u003cspan style=\"color:#a6e22e\"\u003esearch\u003c/span\u003e(query, 10).\u003cspan style=\"color:#a6e22e\"\u003escoreDocs\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eIndexSearcher\u003c/code\u003e needs a \u003ccode\u003eDirectoryReader\u003c/code\u003e. This should point to the same directory where you created the index.\u003c/p\u003e\n\u003cp\u003eTo bring it all together, now our code looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight my-class\" id=\"my-codeblock\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e Analyzer analyzer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StandardAnalyzer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003ePath indexPath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Files.\u003cspan style=\"color:#a6e22e\"\u003ecreateTempDirectory\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tempIndex\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003eDirectory directory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FSDirectory.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(indexPath)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003eIndexWriterConfig config \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriterConfig(analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003eIndexWriter iwriter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexWriter(directory, config);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003eDocument doc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Document();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003eString text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is the text to be indexed.\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003edoc.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Field(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e, text, TextField.\u003cspan style=\"color:#a6e22e\"\u003eTYPE_STORED\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003eiwriter.\u003cspan style=\"color:#a6e22e\"\u003eaddDocument\u003c/span\u003e(doc);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003eiwriter.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Parse a simple query that searches for \u0026#34;text\u0026#34;:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003eQueryParser parser \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e QueryParser(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e, analyzer);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003eQuery query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e parser.\u003cspan style=\"color:#a6e22e\"\u003eparse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Now search the index:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003eDirectoryReader ireader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e DirectoryReader.\u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(directory);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003eIndexSearcher isearcher \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e IndexSearcher(ireader);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003eScoreDoc\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e hits \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e isearcher.\u003cspan style=\"color:#a6e22e\"\u003esearch\u003c/span\u003e(query, 10).\u003cspan style=\"color:#a6e22e\"\u003escoreDocs\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003eassertEquals(1, hits.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Iterate through the results:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e hits.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e  Document hitDoc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e isearcher.\u003cspan style=\"color:#a6e22e\"\u003edoc\u003c/span\u003e(hits\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edoc\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e  assertEquals(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is the text to be indexed.\u0026#34;\u003c/span\u003e, hitDoc.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fieldname\u0026#34;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003eireader.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003edirectory.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003eIOUtils.\u003cspan style=\"color:#a6e22e\"\u003erm\u003c/span\u003e(indexPath);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese were all the concepts that you needed to know to get started using Apache Lucene. You are now ready to start using Apache Lucene. If you want a fully functional java code example, try running a demo as explained \u003ca href=\"https://lucene.apache.org/core/8_3_0/demo/index.html\"\u003ehere\u003c/a\u003e. Now go get your hands dirty and write some code!\u003c/p\u003e\n","description":"These 7 concepts will help you get started with Apache Lucene. This covers concepts like inverted index, analysis, documents, fields, IndexWriter, IndexSearcher and QueryParser","image":"/uploads/2022/01/Apache-Lucene-1-e1648997525598.jpeg","permalink":"http://localhost:1313/blog/apache-lucene-7-concepts-that-will-help-you-get-started/","title":"Apache Lucene 7 concepts that will help you get started"},{"content":"\u003cp\u003eHave you ever wondered how scoring in Elasticsearch is done?\u003c/p\u003e\n\u003cp\u003eOr you might be wondering why Solr ranked your results in a particular order.\u003c/p\u003e\n\u003cp\u003eDo you understand what happens under the hood? Both these systems use Apache Lucene internally. Now Lucene does scoring using a combination of Boolean Model on the inverted index and Vector Space Model.\u003c/p\u003e\n\u003cp\u003eIn the \u003ca href=\"/blog/inverted-index-data-structure/\"\u003eprevious article\u003c/a\u003e, we learned the Boolean model on an inverted index. It is used to shortlist documents that match our query. This list is then scored and sorted in decreasing order of relevance using the Vector Space Model. This article explains how the search scoring algorithm works using the vector space model in information retrieval by simplifying the terminologies and jargon.\u003c/p\u003e\n\u003ch2 id=\"how-the-search-scoring-algorithm-selects-the-documents-that-will-be-ranked\"\u003eHow the search scoring algorithm selects the documents that will be ranked\u003c/h2\u003e\n\u003cp\u003eWhen we get a free text query, it can be converted into a boolean query using any of the boolean operators. E.g. the query: \u003cem\u003e“Vector Space Model”\u003c/em\u003e and be converted to the query \u003cem\u003e“Vector” OR “Space” OR “Model”\u003c/em\u003e. We know how to use an \u003ca href=\"/blog/inverted-index-data-structure/\"\u003einverted index\u003c/a\u003e to find documents matching this boolean query. This is explained in the \u003ca href=\"/blog/inverted-index-data-structure/\"\u003eprevious article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOnce we have a list of documents that match our query, we try to rank these documents. To achieve this we use the Vector Space Model. To understand this model, we first need to understand what vectors are.\u003c/p\u003e\n\u003ch2 id=\"what-are-vectors-and-vector-space\"\u003eWhat are Vectors and Vector Space?\u003c/h2\u003e\n\u003ch3 id=\"vector\"\u003eVector\u003c/h3\u003e\n\u003cp\u003eAccording to \u003ca href=\"https://en.wikipedia.org/wiki/Vector_(mathematics_and_physics)\"\u003eWikipedia\u003c/a\u003e, a vector is a quantity that has both magnitude and direction. The direction component can be treated as a dimension of a vector. For eg, we can represent a point in geometry in vector notation. The directions or dimensions can be its length in the x-axis and y-axis. The exact quantity of this length is called the magnitude of that dimension. E.g point (2,3) can be represented as \u003cem\u003e2*x + 3*y\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"vector-space\"\u003eVector Space\u003c/h3\u003e\n\u003cp\u003eVector space can be considered as the imaginary space where all vectors that are being represented using similar dimensions can be thought to exist. In this space, we can add, subtract or multiply the vectors with each other\u003c/p\u003e\n\u003ch3 id=\"term-vector\"\u003eTerm vector\u003c/h3\u003e\n\u003cp\u003eBut what does this mean in our context? How can vectors be used to rank results? Simply stating, we want a way using which we can represent our queries and documents in mathematical notation. In the context of information retrieval, what we are more interested in is \u003ca href=\"https://www.elastic.co/guide/en/elasticsearch/reference/6.8/docs-termvectors.html#:~:text=Term%20Vectorsedit,the%20realtime%20parameter%20to%20false%20.\"\u003eterm vectors.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTerm Vectors are used to represent statistics like the frequency of each term in our query or document. For eg, we can consider each term as a dimension of the vector and the frequency of each term as its magnitude. Once we have the dimension and magnitude known, then this query can be represented in our vector space. Our vector space is composed of all the vectors that can be formed using any of the words present in our documents.\u003c/p\u003e\n\u003cp\u003eFor example. the query: \u003cem\u003e“Eye for an Eye”\u003c/em\u003e can be represented as the following vector: \u003cem\u003e2*(Eye) + 1*(for) + 1*(an).\u003c/em\u003e Here the words in parenthesis are the dimensions of the vector and the numbers are the magnitude of each dimension which in this case is just the frequency of the word in our query.\u003c/p\u003e\n\u003ch2 id=\"assigning-weights-to-vectors\"\u003eAssigning Weights to Vectors\u003c/h2\u003e\n\u003cp\u003eNow that we know what term vectors are, the natural question arises, how can this be used to rank results? The answer to this lies in assigning the correct magnitude a.k.a weight to each query or document vector. If we assign correct weights, then the problem of ranking documents reduces to performing some mathematical operations on the vectors of each document and the vector of our query. The result of the operations is our score representing how relevant the document is to the query. The ranking then simply means sorting the list of matching documents in decreasing order of score.\u003c/p\u003e\n\u003cp\u003eSo let’s try to understand how we find the magnitude of each dimension of our term vectors. The weight is composed of two components:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTerm Frequency\u003c/li\u003e\n\u003cli\u003eInverse Document Frequency\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"term-frequency--prioritizing-documents-that-contain-query-words-more-times\"\u003eTerm Frequency – Prioritizing documents that contain query words more times.\u003c/h3\u003e\n\u003cp\u003eSuppose there are two documents that contain the words of our query. We will naturally want that the documents containing words in the query more number times to be considered more important than the documents where the words occur fewer number times. Term Frequency component of weight allows us to achieve this. The higher the number of times the term occurs in our query or document, the higher its term frequency.\u003c/p\u003e\n\u003ch3 id=\"inverse-document-frequency--reducing-the-impact-of-common-words\"\u003eInverse Document Frequency – Reducing the impact of common words\u003c/h3\u003e\n\u003cp\u003eUsing just the term frequency alone has a problem. Consider the words that occur very frequently in our language. For eg consider the word “\u003cem\u003ethe\u003c/em\u003e“. This word would occur in almost all documents of reasonable length. But it does not mean if this word is present in our document we consider that document more relevant. Now consider the word “\u003cem\u003eVector\u003c/em\u003e“. Not all documents will have this word. But the documents that do contain this are more relevant to our query “The Vector Space Model”. So if a word is occurring in all the documents, we want to give it lower importance in ranking. Conversely, the words that are rare should add more weight to the ranking. To do this we use Inverse Document Frequency.\u003c/p\u003e\n\u003cp\u003eTo calculate inverse document frequency, we count the number of documents that contain this word. This is known as \u003cem\u003edocument frequency\u003c/em\u003e for the term. Since we want common words to have less impact and rare words to have more impact, we invert the document frequency.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInverse Document Frequency = 1/document frequency\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOnce we have term frequency and inverse document frequency, we can give the weight using the formula:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWeight = TF * IDF\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003ewhere TF is the number of times a term occurs in the document or query.\u003c/p\u003e\n\u003cp\u003eand IDF = Inverse Document Frequency of Term\u003c/p\u003e\n\u003cp\u003eIf we use this formula for weights in our term vectors, we give more impact to the words that occur more times in the document while minimizing the impact of words that are common in all documents.\u003c/p\u003e\n\u003ch2 id=\"score-calculation-using-term-vectors\"\u003eScore calculation using Term Vectors\u003c/h2\u003e\n\u003cp\u003eNow that we have correct weights assigned to our vectors, the search scoring algorithm is ready to calculate the score. To do this, we first create a term vector of our query. Also, remember we already had the list of documents matching the query using boolean retrieval. Now for each document in the list, we create its term vector. Now we need to perform a mathematical operation between our query vector and the vector of each document in the list. The result of each operation is the score for that particular document to query pair.\u003c/p\u003e\n\u003cp\u003eThere can be different mathematical functions used to calculate the similarity score. The one that is most commonly used is known as Cosine Similarity.\u003c/p\u003e\n\u003ch2 id=\"cosine-similarity--how-similar-are-the-documents-to-queries\"\u003eCosine Similarity – How similar are the documents to queries?\u003c/h2\u003e\n\u003cp\u003eCosine similarity calculates how similar two vectors are. It is measured by the cosine of the angle between two vectors and represents whether two vectors are pointing in roughly the same direction.\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/01/cosine-similarity_hu0446f28d25a661b7a083b2a00b970953_25034_1948x612_resize_q75_h2_box_3.webp\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: Cosine similarity represents whether two vectors point in roughly the same direction\u003c/figcaption\u003e\n  \u003c/figure\u003e\u003cp\u003eCosine similarity is calculated using the following formula:\u003c/p\u003e\n\u003cfigure\u003e\n    \n\n      \u003cimg src=\"/uploads/2022/01/cosine-similarity-formula-1_hu1e7116e3c2735b6944b898cff0ed1c67_38851_1352x482_resize_q75_h2_box_3.webp\" alt=\"The search scoring algorithm uses the following formula to calculate cosine similarity.\"\u003e\n    \n    \u003cfigcaption align = \"center\"\u003eFigure: The search scoring algorithm uses the following formula to calculate cosine similarity.\u003c/figcaption\u003e\n  \u003c/figure\u003e\u003cp\u003eThe result of this operation is our score. Once we have scored each document, we sort our list of matching documents according to the score. The documents that have more terms in common with our query will rank higher. Similarly, the documents that have fewer terms will rank lower.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this article, we understood the inner workings of the search scoring algorithm. We learned what vectors are. We then understood how to represent queries and documents as vectors. After that, we used the cosine similarity formula to find the score of the documents to query. At last, we understood that we can use this score to rank documents. This in a nutshell explains how the Vector Space model is used in Information Retrieval to calculate scoring. This is the model that is used in Lucene and hence in Solr and Elasticsearch.\u003c/p\u003e\n\u003ch2 id=\"what-next\"\u003eHope you learned something from this article.\nWhat next?\u003c/h2\u003e\n\u003cp\u003eIn this article, we learned how search results are scored, but how to find out the list of search results for which we need to calculate the score? This is done in a fast and efficient manner using the inverted index data structure. Read all about it \u003ca href=\"/blog/inverted-index-data-structure/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n","description":"Understand how the score is calculated using Vector Space Model to rank search results. In-depth explanation in simple easy to understand language.","image":"/uploads/2022/01/google-search-min-e1648997488690.jpeg","permalink":"http://localhost:1313/blog/how-search-scoring-algorithm-works/","title":"How the search scoring algorithm works - A plain English guide to Vector Space Model"}]